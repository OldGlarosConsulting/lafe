{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Select/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Select as ChakraSelect } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst ReactSelect = (_ref) => {\n  let {\n    name,\n    children,\n    containerProps\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"children\", \"containerProps\"]);\n\n  const selectRef = useRef(null);\n  const {\n    0: isFocused,\n    1: setIsFocused\n  } = useState(false);\n  const {\n    0: isFilled,\n    1: setIsFilled\n  } = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _selectRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_selectRef$current = selectRef.current) === null || _selectRef$current === void 0 ? void 0 : _selectRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    bg: \"green.50\",\n    width: \"100%\",\n    height: 12,\n    borderRadius: \"md\",\n    paddingLeft: 4\n  }, containerProps, {\n    onClick: () => {\n      selectRef.current.focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(ChakraSelect, _extends({\n    defaultValue: defaultValue,\n    bg: \"green.50\",\n    border: 0,\n    focusBorderColor: null,\n    paddingLeft: 0,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    ref: selectRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), children));\n};\n\nexport default ReactSelect;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Select/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Select","ChakraSelect","useField","Container","ReactSelect","name","children","containerProps","rest","selectRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path","focus"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,WAA7C,QAAgE,OAAhE;AAEA,SACEC,MAAM,IAAIC,YADZ,QAIO,iBAJP;AAKA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;;AAOA,MAAMC,WAAmC,GAAG,UAKtC;AAAA,MALuC;AAC3CC,IAAAA,IAD2C;AAE3CC,IAAAA,QAF2C;AAG3CC,IAAAA;AAH2C,GAKvC;AAAA,MADDC,IACC;;AACJ,QAAMC,SAAS,GAAGZ,MAAM,CAAoB,IAApB,CAAxB;AAEA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACc,QAAD;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEgB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDf,QAAQ,CAACG,IAAD,CAAlE;AAEA,QAAMa,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACzCY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGpB,WAAW,CAAC,MAAM;AAAA;;AACxCY,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,wBAACJ,SAAS,CAACW,OAAX,uDAAC,mBAAmBC,KAApB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAzB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,SAAS,CAACW,OAFH;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,SACE,cAAC,SAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,SAAS,EAAE,CAAC,CAACI,KAHf;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,MAAM,EAAE,EANV;AAOE,IAAA,YAAY,EAAC,IAPf;AAQE,IAAA,WAAW,EAAE;AARf,KASMT,cATN;AAUE,IAAA,OAAO,EAAE,MAAM;AACbE,MAAAA,SAAS,CAACW,OAAV,CAAkBI,KAAlB;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcE,cAAC,YAAD;AACE,IAAA,YAAY,EAAET,YADhB;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,MAAM,EAAE,CAHV;AAIE,IAAA,gBAAgB,EAAE,IAJpB;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,OAAO,EAAEG,gBANX;AAOE,IAAA,MAAM,EAAEC,eAPV;AAQE,IAAA,GAAG,EAAEV;AARP,KASMD,IATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWGF,QAXH,CAdF,CADF;AA8BD,CA7DD;;AA+DA,eAAeF,WAAf","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\n\nimport {\n  Select as ChakraSelect,\n  SelectProps as ChakraSelectProps,\n  PseudoBoxProps as ChakraPseudoBoxProps,\n} from '@chakra-ui/core';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface ISelectProps extends ChakraSelectProps {\n  name: string;\n  containerProps?: ChakraPseudoBoxProps;\n}\n\nconst ReactSelect: React.FC<ISelectProps> = ({\n  name,\n  children,\n  containerProps,\n  ...rest\n}) => {\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!selectRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container\n      isFocused={isFocused}\n      isFilled={isFilled}\n      isErrored={!!error}\n      bg=\"green.50\"\n      width=\"100%\"\n      height={12}\n      borderRadius=\"md\"\n      paddingLeft={4}\n      {...containerProps}\n      onClick={() => {\n        selectRef.current.focus();\n      }}\n    >\n      <ChakraSelect\n        defaultValue={defaultValue}\n        bg=\"green.50\"\n        border={0}\n        focusBorderColor={null}\n        paddingLeft={0}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={selectRef}\n        {...rest}\n      >\n        {children}\n      </ChakraSelect>\n    </Container>\n  );\n};\n\nexport default ReactSelect;\n"]},"metadata":{},"sourceType":"module"}