{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useMemo } from 'react';\nimport { FiChevronDown, FiChevronLeft, FiChevronRight, FiChevronsLeft, FiChevronsRight, FiChevronUp } from 'react-icons/fi';\nimport { useMediaQuery } from 'react-responsive';\nimport { usePagination, useSortBy, useTable } from 'react-table';\nimport { Flex, Text } from '@chakra-ui/core';\nimport Card from './Card';\nimport BottomSection from './Card/CardFooter';\nimport TopSection from './Card/CardHeader/index';\nimport { StyledTable, TableCell, TableHead, TableIconButton, TableRow } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst Table = (_ref) => {\n  let {\n    heading,\n    columns,\n    data,\n    pageSize: initialPageSize = 5,\n    onRowClick\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"heading\", \"columns\", \"data\", \"pageSize\", \"onRowClick\"]);\n\n  const tableColumns = useMemo(() => columns, [columns]);\n  const isTabletOrMobile = useMediaQuery({\n    query: '(max-width: 40em)'\n  });\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns: tableColumns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: initialPageSize\n    }\n  }, useSortBy, usePagination);\n  return ___EmotionJSX(Card, _extends({\n    flexDirection: \"column\",\n    flex: 1,\n    maxWidth: \"100%\",\n    width: \"100%\"\n  }, rest), heading && ___EmotionJSX(TopSection, {\n    alignItems: \"center\",\n    fontWeight: \"bold\"\n  }, heading), ___EmotionJSX(StyledTable, getTableProps(), ___EmotionJSX(TableHead, null, headerGroups.map(headerGroup => ___EmotionJSX(Flex, _extends({\n    key: headerGroup.id,\n    flex: 1,\n    flexDirection: \"row\"\n  }, headerGroup.getHeaderGroupProps()), headerGroup.headers.map(column => ___EmotionJSX(TableCell, _extends({\n    p: 4,\n    width: column.width,\n    key: column.id,\n    bg: \"gray.50\",\n    justifyContent: \"space-between\"\n  }, column.getHeaderProps(), column.getSortByToggleProps()), ___EmotionJSX(Text, {\n    fontWeight: \"bold\"\n  }, column.render('Header')), (() => {\n    if (column.isSorted) {\n      if (column.isSortedDesc) {\n        return ___EmotionJSX(FiChevronDown, {\n          size: 20\n        });\n      }\n\n      return ___EmotionJSX(FiChevronUp, {\n        size: 20\n      });\n    }\n\n    return '';\n  })()))))), ___EmotionJSX(Flex, {\n    flexDirection: \"column\"\n  }, page.map((row, key) => {\n    prepareRow(row);\n    return ___EmotionJSX(TableRow, _extends({\n      onClick: () => onRowClick && onRowClick(row),\n      key: key // eslint-disable-line\n      ,\n      flexDirection: \"row\"\n    }, row.getRowProps()), row.cells.map(cell => ___EmotionJSX(TableCell, _extends({\n      key: cell.row.index,\n      justifyContent: \"flex-start\",\n      p: 4\n    }, cell.getCellProps()), cell.render('Cell'))));\n  }))), ___EmotionJSX(BottomSection, {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\"\n  }, ___EmotionJSX(Flex, {\n    flexDirection: \"row\"\n  }, ___EmotionJSX(TableIconButton, {\n    mr: 2,\n    onClick: () => gotoPage(0),\n    isDisabled: !canPreviousPage,\n    icon: () => ___EmotionJSX(FiChevronsLeft, {\n      size: 20\n    })\n  }), ___EmotionJSX(TableIconButton, {\n    mr: 2,\n    isDisabled: !canPreviousPage,\n    onClick: () => previousPage(),\n    icon: () => ___EmotionJSX(FiChevronLeft, {\n      size: 20\n    })\n  })), ___EmotionJSX(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, ___EmotionJSX(Text, {\n    mr: 4\n  }, \"P\\xE1gina\", ' ', ___EmotionJSX(\"strong\", null, pageIndex + 1, \" de\", pageOptions.length)), !isTabletOrMobile && ___EmotionJSX(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    }\n  }, [5, 10, 20, 30, 40, 50].map(size => ___EmotionJSX(\"option\", {\n    key: size,\n    value: size\n  }, size, \" linhas\")))), ___EmotionJSX(Flex, {\n    flexDirection: \"row\"\n  }, ___EmotionJSX(TableIconButton, {\n    ml: 2,\n    isDisabled: !canNextPage,\n    onClick: () => nextPage(),\n    icon: () => ___EmotionJSX(FiChevronRight, {\n      size: 20\n    })\n  }), ___EmotionJSX(TableIconButton, {\n    ml: 2,\n    onClick: () => gotoPage(pageCount ? pageCount - 1 : 1),\n    isDisabled: !canNextPage,\n    icon: () => ___EmotionJSX(FiChevronsRight, {\n      size: 20\n    })\n  }))));\n};\n\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}