{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Select/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Select as ChakraSelect } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar ReactSelect = function ReactSelect(_ref) {\n  _s();\n\n  var name = _ref.name,\n      children = _ref.children,\n      containerProps = _ref.containerProps,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"children\", \"containerProps\"]);\n\n  var selectRef = useRef(null);\n\n  var _useState = useState(false),\n      isFocused = _useState[0],\n      setIsFocused = _useState[1];\n\n  var _useState2 = useState(false),\n      isFilled = _useState2[0],\n      setIsFilled = _useState2[1];\n\n  var _useField = useField(name),\n      fieldName = _useField.fieldName,\n      defaultValue = _useField.defaultValue,\n      error = _useField.error,\n      registerField = _useField.registerField;\n\n  var handleInputFocus = useCallback(function () {\n    setIsFocused(true);\n  }, []);\n  var handleInputBlur = useCallback(function () {\n    var _selectRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_selectRef$current = selectRef.current) === null || _selectRef$current === void 0 ? void 0 : _selectRef$current.value));\n  }, []);\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    bg: \"green.50\",\n    width: \"100%\",\n    height: 12,\n    borderRadius: \"md\",\n    paddingLeft: 4\n  }, containerProps, {\n    onClick: function onClick() {\n      selectRef.current.focus();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(ChakraSelect, _extends({\n    defaultValue: defaultValue,\n    bg: \"green.50\",\n    border: 0,\n    focusBorderColor: null,\n    paddingLeft: 0,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    ref: selectRef\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), children));\n};\n\n_s(ReactSelect, \"k8Z789gHOG4rv1kf/+EmQ4yJj7M=\", false, function () {\n  return [useField];\n});\n\n_c = ReactSelect;\nexport default ReactSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactSelect\");","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Select/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Select","ChakraSelect","useField","Container","ReactSelect","name","children","containerProps","rest","selectRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path","focus"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,WAA7C,QAAgE,OAAhE;AAEA,SACEC,MAAM,IAAIC,YADZ,QAIO,iBAJP;AAKA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;;AAOA,IAAMC,WAAmC,GAAG,SAAtCA,WAAsC,OAKtC;AAAA;;AAAA,MAJJC,IAII,QAJJA,IAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFJC,cAEI,QAFJA,cAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,SAAS,GAAGZ,MAAM,CAAoB,IAApB,CAAxB;;AADI,kBAG8BC,QAAQ,CAAC,KAAD,CAHtC;AAAA,MAGGY,SAHH;AAAA,MAGcC,YAHd;;AAAA,mBAI4Bb,QAAQ,CAAC,KAAD,CAJpC;AAAA,MAIGc,QAJH;AAAA,MAIaC,WAJb;;AAAA,kBAMsDX,QAAQ,CAACG,IAAD,CAN9D;AAAA,MAMIS,SANJ,aAMIA,SANJ;AAAA,MAMeC,YANf,aAMeA,YANf;AAAA,MAM6BC,KAN7B,aAM6BA,KAN7B;AAAA,MAMoCC,aANpC,aAMoCA,aANpC;;AAQJ,MAAMC,gBAAgB,GAAGnB,WAAW,CAAC,YAAM;AACzCY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,MAAMQ,eAAe,GAAGpB,WAAW,CAAC,YAAM;AAAA;;AACxCY,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,wBAACJ,SAAS,CAACW,OAAX,uDAAC,mBAAmBC,KAApB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAzB,EAAAA,SAAS,CAAC,YAAM;AACdqB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,SAAS,CAACW,OAFH;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,SACE,cAAC,SAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,SAAS,EAAE,CAAC,CAACI,KAHf;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,MAAM,EAAE,EANV;AAOE,IAAA,YAAY,EAAC,IAPf;AAQE,IAAA,WAAW,EAAE;AARf,KASMT,cATN;AAUE,IAAA,OAAO,EAAE,mBAAM;AACbE,MAAAA,SAAS,CAACW,OAAV,CAAkBI,KAAlB;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcE,cAAC,YAAD;AACE,IAAA,YAAY,EAAET,YADhB;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,MAAM,EAAE,CAHV;AAIE,IAAA,gBAAgB,EAAE,IAJpB;AAKE,IAAA,WAAW,EAAE,CALf;AAME,IAAA,OAAO,EAAEG,gBANX;AAOE,IAAA,MAAM,EAAEC,eAPV;AAQE,IAAA,GAAG,EAAEV;AARP,KASMD,IATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWGF,QAXH,CAdF,CADF;AA8BD,CA7DD;;GAAMF,W;UAWsDF,Q;;;KAXtDE,W;AA+DN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\n\nimport {\n  Select as ChakraSelect,\n  SelectProps as ChakraSelectProps,\n  PseudoBoxProps as ChakraPseudoBoxProps,\n} from '@chakra-ui/core';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface ISelectProps extends ChakraSelectProps {\n  name: string;\n  containerProps?: ChakraPseudoBoxProps;\n}\n\nconst ReactSelect: React.FC<ISelectProps> = ({\n  name,\n  children,\n  containerProps,\n  ...rest\n}) => {\n  const selectRef = useRef<HTMLSelectElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!selectRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container\n      isFocused={isFocused}\n      isFilled={isFilled}\n      isErrored={!!error}\n      bg=\"green.50\"\n      width=\"100%\"\n      height={12}\n      borderRadius=\"md\"\n      paddingLeft={4}\n      {...containerProps}\n      onClick={() => {\n        selectRef.current.focus();\n      }}\n    >\n      <ChakraSelect\n        defaultValue={defaultValue}\n        bg=\"green.50\"\n        border={0}\n        focusBorderColor={null}\n        paddingLeft={0}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        ref={selectRef}\n        {...rest}\n      >\n        {children}\n      </ChakraSelect>\n    </Container>\n  );\n};\n\nexport default ReactSelect;\n"]},"metadata":{},"sourceType":"module"}