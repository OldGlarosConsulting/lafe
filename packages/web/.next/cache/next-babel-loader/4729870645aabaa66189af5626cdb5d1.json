{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateCemeteriesModal/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef } from 'react';\nimport { Button, Flex, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useToast } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport api from '../../../services/api';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar CreateCemeteriesModal = function CreateCemeteriesModal(_ref) {\n  _s();\n\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      onSave = _ref.onSave;\n  var formRef = useRef(null);\n  var toast = useToast();\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, event) {\n      var _formRef$current, schema, _formRef$current2, errors;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n              schema = Yup.object().shape({\n                name: Yup.string().required('Nome obrigatório')\n              });\n              _context.next = 5;\n              return schema.validate(data, {\n                abortEarly: false\n              });\n\n            case 5:\n              _context.next = 7;\n              return api.post('cemeteries', data);\n\n            case 7:\n              toast({\n                status: 'success',\n                title: 'Cemitério criado com sucesso',\n                position: 'top',\n                duration: 3000\n              });\n              onClose(event);\n              onSave();\n              _context.next = 19;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0 instanceof Yup.ValidationError)) {\n                _context.next = 18;\n                break;\n              }\n\n              errors = getValidationErrors(_context.t0);\n              (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n              return _context.abrupt(\"return\");\n\n            case 18:\n              toast({\n                status: 'error',\n                title: 'Erro ao registrar cemitério',\n                description: 'Ocorreu um erro ao registrar cemitério, tente novamente.',\n                position: 'top',\n                duration: 5000\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 12]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  return ___EmotionJSX(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(ModalOverlay, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(ModalContent, {\n    maxWidth: 900,\n    borderRadius: \"md\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(ModalHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Registrar cemit\\xE9rio\"), ___EmotionJSX(ModalCloseButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBody, {\n    paddingBottom: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Flex, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Input, {\n    name: \"name\",\n    placeholder: \"Nome\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }))), ___EmotionJSX(ModalFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"ghost\",\n    onClick: onClose,\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Cancelar\"), ___EmotionJSX(Button, {\n    type: \"submit\",\n    variantColor: \"green\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Salvar\")))));\n};\n\n_s(CreateCemeteriesModal, \"NW0mLTQlg44UBMWD0hZFKr2LzKQ=\", false, function () {\n  return [useToast];\n});\n\n_c = CreateCemeteriesModal;\nexport default CreateCemeteriesModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCemeteriesModal\");","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateCemeteriesModal/index.tsx"],"names":["React","useCallback","useRef","Button","Flex","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useToast","Form","Yup","Input","getValidationErrors","api","CreateCemeteriesModal","isOpen","onClose","onSave","formRef","toast","handleSubmit","data","event","current","setErrors","schema","object","shape","name","string","required","validate","abortEarly","post","status","title","position","duration","ValidationError","errors","description","border","borderColor","bg"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef } from 'react';\n\nimport {\n  Button,\n  Flex,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from '@chakra-ui/core';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\n\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\n\nimport api from '../../../services/api';\n\ninterface IFormData {\n  name: string;\n}\n\ninterface ICreateCemeteriesModalProps {\n  isOpen: boolean;\n  onClose?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason?: 'pressedEscape' | 'clickedOverlay',\n  ) => void;\n  onSave: () => void;\n}\n\nconst CreateCemeteriesModal: React.FC<ICreateCemeteriesModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n\n  const toast = useToast();\n\n  const handleSubmit = useCallback(async (data: IFormData, event) => {\n    try {\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome obrigatório'),\n      });\n\n      await schema.validate(data, { abortEarly: false });\n\n      await api.post('cemeteries', data);\n\n      toast({\n        status: 'success',\n        title: 'Cemitério criado com sucesso',\n        position: 'top',\n        duration: 3000,\n      });\n\n      onClose(event);\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n\n        formRef.current?.setErrors(errors);\n\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro ao registrar cemitério',\n        description: 'Ocorreu um erro ao registrar cemitério, tente novamente.',\n        position: 'top',\n        duration: 5000,\n      });\n    }\n  }, []);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n\n      <ModalContent maxWidth={900} borderRadius=\"md\">\n        <ModalHeader>Registrar cemitério</ModalHeader>\n        <ModalCloseButton />\n\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <ModalBody paddingBottom={4}>\n            <Flex>\n              <Input\n                name=\"name\"\n                placeholder=\"Nome\"\n                containerProps={{\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n              />\n            </Flex>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" onClick={onClose} marginRight={4}>\n              Cancelar\n            </Button>\n\n            <Button type=\"submit\" variantColor=\"green\">\n              Salvar\n            </Button>\n          </ModalFooter>\n        </Form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateCemeteriesModal;\n"]},"metadata":{},"sourceType":"module"}