{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport { FiChevronDown, FiChevronLeft, FiChevronRight, FiChevronsLeft, FiChevronsRight, FiChevronUp } from 'react-icons/fi';\nimport { useMediaQuery } from 'react-responsive';\nimport { usePagination, useSortBy, useTable } from 'react-table';\nimport { Flex, Text } from '@chakra-ui/core';\nimport Card from './Card';\nimport BottomSection from './Card/CardFooter';\nimport TopSection from './Card/CardHeader/index';\nimport { StyledTable, TableCell, TableHead, TableIconButton, TableRow } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar Table = function Table(_ref) {\n  var heading = _ref.heading,\n      columns = _ref.columns,\n      data = _ref.data,\n      _ref$pageSize = _ref.pageSize,\n      initialPageSize = _ref$pageSize === void 0 ? 5 : _ref$pageSize,\n      onRowClick = _ref.onRowClick,\n      rest = _objectWithoutProperties(_ref, [\"heading\", \"columns\", \"data\", \"pageSize\", \"onRowClick\"]);\n\n  var tableColumns = useMemo(function () {\n    return columns;\n  }, [columns]);\n  var isTabletOrMobile = useMediaQuery({\n    query: '(max-width: 40em)'\n  });\n\n  var _ref2 = useTable({\n    columns: tableColumns,\n    data: data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: initialPageSize\n    }\n  }, useSortBy, usePagination),\n      getTableProps = _ref2.getTableProps,\n      headerGroups = _ref2.headerGroups,\n      prepareRow = _ref2.prepareRow,\n      page = _ref2.page,\n      canPreviousPage = _ref2.canPreviousPage,\n      canNextPage = _ref2.canNextPage,\n      pageOptions = _ref2.pageOptions,\n      pageCount = _ref2.pageCount,\n      gotoPage = _ref2.gotoPage,\n      nextPage = _ref2.nextPage,\n      previousPage = _ref2.previousPage,\n      setPageSize = _ref2.setPageSize,\n      _ref2$state = _ref2.state,\n      pageIndex = _ref2$state.pageIndex,\n      pageSize = _ref2$state.pageSize;\n\n  return ___EmotionJSX(Card, _extends({\n    flexDirection: \"column\",\n    flex: 1,\n    maxWidth: \"100%\",\n    width: \"100%\"\n  }, rest), heading && ___EmotionJSX(TopSection, {\n    alignItems: \"center\",\n    fontWeight: \"bold\"\n  }, heading), ___EmotionJSX(StyledTable, getTableProps(), ___EmotionJSX(TableHead, null, headerGroups.map(function (headerGroup) {\n    return ___EmotionJSX(Flex, _extends({\n      key: headerGroup.id,\n      flex: 1,\n      flexDirection: \"row\"\n    }, headerGroup.getHeaderGroupProps()), headerGroup.headers.map(function (column) {\n      return ___EmotionJSX(TableCell, _extends({\n        p: 4,\n        width: column.width,\n        key: column.id,\n        bg: \"gray.50\",\n        justifyContent: \"space-between\"\n      }, column.getHeaderProps(), column.getSortByToggleProps()), ___EmotionJSX(Text, {\n        fontWeight: \"bold\"\n      }, column.render('Header')), function () {\n        if (column.isSorted) {\n          if (column.isSortedDesc) {\n            return ___EmotionJSX(FiChevronDown, {\n              size: 20\n            });\n          }\n\n          return ___EmotionJSX(FiChevronUp, {\n            size: 20\n          });\n        }\n\n        return '';\n      }());\n    }));\n  })), ___EmotionJSX(Flex, {\n    flexDirection: \"column\"\n  }, page.map(function (row, key) {\n    prepareRow(row);\n    return ___EmotionJSX(TableRow, _extends({\n      onClick: function onClick() {\n        return onRowClick && onRowClick(row);\n      },\n      key: key // eslint-disable-line\n      ,\n      flexDirection: \"row\"\n    }, row.getRowProps()), row.cells.map(function (cell) {\n      return ___EmotionJSX(TableCell, _extends({\n        key: cell.row.index,\n        justifyContent: \"flex-start\",\n        p: 4\n      }, cell.getCellProps()), cell.render('Cell'));\n    }));\n  }))), ___EmotionJSX(BottomSection, {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\"\n  }, ___EmotionJSX(Flex, {\n    flexDirection: \"row\"\n  }, ___EmotionJSX(TableIconButton, {\n    mr: 2,\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    isDisabled: !canPreviousPage,\n    icon: function icon() {\n      return ___EmotionJSX(FiChevronsLeft, {\n        size: 20\n      });\n    }\n  }), ___EmotionJSX(TableIconButton, {\n    mr: 2,\n    isDisabled: !canPreviousPage,\n    onClick: function onClick() {\n      return previousPage();\n    },\n    icon: function icon() {\n      return ___EmotionJSX(FiChevronLeft, {\n        size: 20\n      });\n    }\n  })), ___EmotionJSX(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, ___EmotionJSX(Text, {\n    mr: 4\n  }, \"P\\xE1gina\", ' ', ___EmotionJSX(\"strong\", null, pageIndex + 1, \" de\", pageOptions.length)), !isTabletOrMobile && ___EmotionJSX(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    }\n  }, [5, 10, 20, 30, 40, 50].map(function (size) {\n    return ___EmotionJSX(\"option\", {\n      key: size,\n      value: size\n    }, size, \" linhas\");\n  }))), ___EmotionJSX(Flex, {\n    flexDirection: \"row\"\n  }, ___EmotionJSX(TableIconButton, {\n    ml: 2,\n    isDisabled: !canNextPage,\n    onClick: function onClick() {\n      return nextPage();\n    },\n    icon: function icon() {\n      return ___EmotionJSX(FiChevronRight, {\n        size: 20\n      });\n    }\n  }), ___EmotionJSX(TableIconButton, {\n    ml: 2,\n    onClick: function onClick() {\n      return gotoPage(pageCount ? pageCount - 1 : 1);\n    },\n    isDisabled: !canNextPage,\n    icon: function icon() {\n      return ___EmotionJSX(FiChevronsRight, {\n        size: 20\n      });\n    }\n  }))));\n};\n\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}