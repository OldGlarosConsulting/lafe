{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef } from 'react';\nimport { FiLock, FiMail } from 'react-icons/fi';\nimport NextLink from 'next/link';\nimport { useRouter } from 'next/router';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport SEO from '@/components/SEO';\nimport { useAuthentication } from '@/hooks/authentication';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport { useToast, Button, Flex, Heading, Link } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar Login = function Login() {\n  var formRef = useRef(null);\n  var router = useRouter();\n  var toast = useToast();\n\n  var _useAuthentication = useAuthentication(),\n      logIn = _useAuthentication.logIn;\n\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var _formRef$current, schema, _formRef$current2, errors;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n              schema = Yup.object().shape({\n                email: Yup.string().email().required('E-mail obrigatório'),\n                password: Yup.string().required('Senha obrigatória')\n              });\n              _context.next = 5;\n              return schema.validate(data, {\n                abortEarly: false\n              });\n\n            case 5:\n              _context.next = 7;\n              return logIn(data);\n\n            case 7:\n              toast({\n                status: 'success',\n                title: 'Autenticado com sucesso',\n                description: 'Você está sendo redirecionado para a página inicial.',\n                position: 'top',\n                duration: 3000\n              });\n              router.replace('/dashboard');\n              _context.next = 18;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (!(_context.t0 instanceof Yup.ValidationError)) {\n                _context.next = 17;\n                break;\n              }\n\n              errors = getValidationErrors(_context.t0);\n              (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n              return _context.abrupt(\"return\");\n\n            case 17:\n              toast({\n                status: 'error',\n                title: 'Erro na autenticação',\n                description: 'Ocorreu um erro ao fazer login, cheque as credenciais.',\n                position: 'top',\n                duration: 5000\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [logIn, router, toast]);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(SEO, {\n    title: \"Lafe\",\n    image: \"og/boost.png\",\n    shouldExcludeTitleSuffix: true,\n    description: \"Fazer login na plataforma\"\n  }), ___EmotionJSX(Flex, {\n    as: \"main\",\n    height: \"100vh\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingX: 6,\n    backgroundColor: \"blue.300\"\n  }, ___EmotionJSX(Flex, {\n    backgroundColor: \"blue.500\",\n    borderRadius: \"md\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    padding: 16,\n    boxShadow: \"xl\"\n  }, ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit\n  }, ___EmotionJSX(Heading, {\n    color: \"White\",\n    marginBottom: 6\n  }, \"Login\"), ___EmotionJSX(Input, {\n    name: \"email\",\n    icon: FiMail,\n    placeholder: \"E-mail\"\n  }), ___EmotionJSX(Input, {\n    name: \"password\",\n    icon: FiLock,\n    type: \"password\",\n    placeholder: \"Senha\",\n    containerProps: {\n      marginTop: 3\n    }\n  }), ___EmotionJSX(Button, {\n    type: \"submit\",\n    bg: \"blue.300\",\n    color: \"gray.800\",\n    _hover: {\n      bg: 'blue.400',\n      color: 'gray.900'\n    },\n    _focusWithin: {\n      bg: 'blue.400',\n      color: 'gray.900'\n    },\n    width: \"100%\",\n    marginY: 4,\n    paddingY: 6\n  }, \"Entrar\"), ___EmotionJSX(NextLink, {\n    href: \"forgot-password\"\n  }, ___EmotionJSX(Link, {\n    color: \"blue.100\"\n  }, \"Esqueci minha senha\"))))));\n};\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}