{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useCallback, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport usePersistedState from '@/utils/hooks/usePersistedState';\nimport api from '../services/api';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst AuthenticationContext = /*#__PURE__*/createContext({});\n\nconst AuthenticationProvider = ({\n  children\n}) => {\n  const [data, setData] = usePersistedState('session', null);\n  const router = useRouter();\n  const isLoggedIn = useCallback(() => !!(data === null || data === void 0 ? void 0 : data.access_token), [data]);\n  const logIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('/sessions', {\n      email,\n      password\n    });\n    setData(response.data);\n  }, [setData]);\n  const logOut = useCallback(() => {\n    setData(null);\n    router.replace('/login');\n  }, [router, setData]);\n  useEffect(() => {\n    const route = router.asPath;\n\n    const isRoute = name => route.split('?')[0] === name;\n\n    if (!isLoggedIn()) {\n      if (!isRoute('/login')) {\n        router.replace('/login');\n      }\n\n      return;\n    }\n\n    if (isRoute('/') || isRoute('/login') || isRoute('/app')) {\n      router.replace('/dashboard');\n      return;\n    }\n\n    api.get('profile').then(response => {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        user: response.data\n      }));\n    });\n  }, [isLoggedIn, data, setData, router]);\n  return ___EmotionJSX(AuthenticationContext.Provider, {\n    value: {\n      user: data === null || data === void 0 ? void 0 : data.user,\n      isLoggedIn,\n      logIn,\n      logOut\n    }\n  }, children);\n};\n\nfunction useAuthentication() {\n  const context = useContext(AuthenticationContext);\n\n  if (!context) {\n    throw new Error(\"'useAuthentication' must be used within an 'AuthenticationProvider'\");\n  }\n\n  return context;\n}\n\nexport { AuthenticationProvider, useAuthentication };","map":null,"metadata":{},"sourceType":"module"}