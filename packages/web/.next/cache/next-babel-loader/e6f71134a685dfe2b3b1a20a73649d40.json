{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/hooks/authentication.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useCallback, useContext, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport usePersistedState from '@/utils/hooks/usePersistedState';\nimport api from '../services/api';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst AuthenticationContext = /*#__PURE__*/createContext({});\n\nconst AuthenticationProvider = ({\n  children\n}) => {\n  const [data, setData] = usePersistedState('session', null);\n  const router = useRouter();\n  const isLoggedIn = useCallback(() => !!(data === null || data === void 0 ? void 0 : data.access_token), [data]);\n  const logIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('/sessions', {\n      email,\n      password\n    });\n    setData(response.data);\n  }, [setData]);\n  const logOut = useCallback(() => {\n    setData(null);\n    router.replace('/login');\n  }, [setData]);\n  useEffect(() => {\n    const route = router.asPath;\n\n    const isRoute = name => route.split('?')[0] === name;\n\n    if (!isLoggedIn()) {\n      if (!isRoute('/login') && !isRoute('/live')) {\n        router.replace('/login');\n      }\n\n      return;\n    }\n\n    if (isRoute('/') || isRoute('/login') || isRoute('/app')) {\n      router.replace('/register/cemeteries');\n      return;\n    }\n\n    api.get('profile').then(response => {\n      setData(_objectSpread(_objectSpread({}, data), {}, {\n        user: response.data\n      }));\n    });\n  }, [router]);\n  return ___EmotionJSX(AuthenticationContext.Provider, {\n    value: {\n      user: data === null || data === void 0 ? void 0 : data.user,\n      isLoggedIn,\n      logIn,\n      logOut\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useAuthentication() {\n  const context = useContext(AuthenticationContext);\n\n  if (!context) {\n    throw new Error(\"'useAuthentication' must be used within an 'AuthenticationProvider'\");\n  }\n\n  return context;\n}\n\nexport { AuthenticationProvider, useAuthentication };","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/hooks/authentication.tsx"],"names":["React","createContext","useCallback","useContext","useEffect","useRouter","usePersistedState","api","AuthenticationContext","AuthenticationProvider","children","data","setData","router","isLoggedIn","access_token","logIn","email","password","response","post","logOut","replace","route","asPath","isRoute","name","split","get","then","user","useAuthentication","context","Error"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n} from 'react';\n\nimport { useRouter } from 'next/router';\n\nimport usePersistedState from '@/utils/hooks/usePersistedState';\n\nimport api from '../services/api';\n\ntype Role = 'admin' | 'manager' | 'moderator' | 'vip';\n\ninterface IUser {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\nexport default interface ISession {\n  user: IUser;\n  access_token: string;\n  refresh_token: string;\n}\n\ntype ICreateSessionResponse = ISession;\n\ninterface ISignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface IAuthenticationContextData {\n  user?: IUser;\n  isLoggedIn(): boolean;\n  logIn(credentials: ISignInCredentials): Promise<void>;\n  logOut(): void;\n}\n\nconst AuthenticationContext = createContext<IAuthenticationContextData>(\n  {} as IAuthenticationContextData,\n);\n\nconst AuthenticationProvider: React.FC = ({ children }) => {\n  const [data, setData] = usePersistedState<ISession>('session', null);\n\n  const router = useRouter();\n\n  const isLoggedIn = useCallback(() => !!data?.access_token, [data]);\n\n  const logIn = useCallback(\n    async ({ email, password }: ISignInCredentials) => {\n      const response = await api.post<ICreateSessionResponse>('/sessions', {\n        email,\n        password,\n      });\n\n      setData(response.data);\n    },\n    [setData],\n  );\n\n  const logOut = useCallback(() => {\n    setData(null);\n\n    router.replace('/login');\n  }, [setData]);\n\n  useEffect(() => {\n    const route = router.asPath;\n\n    const isRoute = (name: string) => route.split('?')[0] === name;\n\n    if (!isLoggedIn()) {\n      if (!isRoute('/login') && !isRoute('/live')) {\n        router.replace('/login');\n      }\n      return;\n    }\n\n    if (isRoute('/') || isRoute('/login') || isRoute('/app')) {\n      router.replace('/register/cemeteries');\n      return;\n    }\n\n    api.get<IUser>('profile').then(response => {\n      setData({\n        ...data,\n        user: response.data,\n      });\n    });\n  }, [router]);\n\n  return (\n    <AuthenticationContext.Provider\n      value={{\n        user: data?.user,\n        isLoggedIn,\n        logIn,\n        logOut,\n      }}\n    >\n      {children}\n    </AuthenticationContext.Provider>\n  );\n};\n\nfunction useAuthentication(): IAuthenticationContextData {\n  const context = useContext(AuthenticationContext);\n\n  if (!context) {\n    throw new Error(\n      \"'useAuthentication' must be used within an 'AuthenticationProvider'\",\n    );\n  }\n\n  return context;\n}\n\nexport { AuthenticationProvider, useAuthentication };\n"]},"metadata":{},"sourceType":"module"}