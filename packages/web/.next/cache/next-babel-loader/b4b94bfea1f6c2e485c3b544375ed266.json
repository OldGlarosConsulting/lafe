{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\nimport customTheme from '@/styles/theme';\nimport { ThemeProvider as ChakraThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst ThemeContainer = ({\n  children\n}) => ___EmotionJSX(ChakraThemeProvider, {\n  theme: customTheme\n}, ___EmotionJSX(ColorModeProvider, {\n  value: \"light\"\n}, ___EmotionJSX(EmotionThemeProvider, {\n  theme: {}\n}, ___EmotionJSX(CSSReset, {\n  config: (theme, config) => _objectSpread(_objectSpread({}, config), {}, {\n    light: _objectSpread(_objectSpread({}, config.light), {}, {\n      bg: theme.colors.blue[300],\n      color: theme.colors.gray[700]\n    })\n  })\n}), children)));\n\nexport default ThemeContainer;","map":null,"metadata":{},"sourceType":"module"}