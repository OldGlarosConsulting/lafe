{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateDeceasedModal/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Text, Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Flex, useToast, CircularProgress, Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport { setHours, setMinutes, formatISO } from 'date-fns';\nimport * as Yup from 'yup';\nimport DatePicker from '@/components/DatePicker';\nimport Input from '@/components/Input';\nimport Select from '@/components/Select';\nimport TimePicker from '@/components/TimePicker';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport api from '../../../services/api'; // eslint-disable-next-line\n\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst CreateDeceasedModal = ({\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  const formRef = useRef(null);\n  const toast = useToast();\n  const {\n    0: cemeteries,\n    1: setCemeteries\n  } = useState([]);\n  const {\n    0: customers,\n    1: setCustomers\n  } = useState([]);\n  const {\n    0: funerals,\n    1: setFunerals\n  } = useState([]);\n  const {\n    0: createdLink,\n    1: setCreatedLink\n  } = useState('');\n  const {\n    0: requestStatus,\n    1: setRequestStatus\n  } = useState(null);\n  useEffect(() => {\n    setRequestStatus(null);\n    setFunerals([]);\n    api.get('cemeteries').then(response => {\n      const cemeteriesResponse = response.data;\n      setCemeteries(cemeteriesResponse);\n    });\n    api.get('customers').then(response => {\n      const customersResponse = response.data;\n      setCustomers(customersResponse);\n    });\n  }, []);\n  const handleSubmit = useCallback(async (data, event) => {\n    try {\n      var _formRef$current;\n\n      console.log('sd');\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome do falecido obrigatório'),\n        responsible_id: Yup.string().uuid().required('Responsável obrigatório'),\n        cemetery_id: Yup.string().uuid().required('Cemitério obrigatório'),\n        funeral_location_id: Yup.string().uuid().required('Local do velório obrigatório'),\n        sepulting_location_id: Yup.string().uuid().required('Local do sepultamento obrigatório'),\n        funeral_date: Yup.date().required('Data do velório obrigatório'),\n        funeral_initial_time: Yup.string().required('Horário inicial do velório obrigatório'),\n        funeral_final_time: Yup.string().required('Horário final do velório obrigatório'),\n        sepulting_date: Yup.date().required('Data do sepultamento obrigatório'),\n        sepulting_time: Yup.string().required('Horário do sepultamento obrigatório')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      setRequestStatus('Loading');\n      const funeralInitialDateTime = formatISO(setMinutes(setHours(new Date(data.funeral_date), Number(data.funeral_initial_time.substr(0, 2))), Number(data.funeral_initial_time.substr(3))));\n      const funeralFinalDateTime = formatISO(setMinutes(setHours(new Date(data.funeral_date), Number(data.funeral_final_time.substr(0, 2))), Number(data.funeral_final_time.substr(3))));\n      const sepultingDateTime = formatISO(setMinutes(setHours(new Date(data.sepulting_date), Number(data.sepulting_time.substr(0, 2))), Number(data.sepulting_time.substr(3))));\n      const submitData = {\n        name: data.name,\n        responsible_id: data.responsible_id,\n        funeral_initial_date: funeralInitialDateTime,\n        funeral_final_date: funeralFinalDateTime,\n        sepulting_date: sepultingDateTime,\n        funeral_id: data.funeral_id\n      };\n      const response = await api.post('deceaseds', submitData);\n      const live_link = `${process.env.NEXT_PUBLIC_SITE_URL}/live?id=${response.data.id}`;\n\n      if (!live_link) {\n        toast({\n          status: 'error',\n          title: 'Erro no registro de falecido',\n          description: 'Ocorreu um erro ao tentar registrar o falecido, tente novamente.',\n          position: 'top',\n          duration: 5000\n        });\n        onClose(event);\n        setFunerals([]);\n        setRequestStatus(null);\n        return;\n      }\n\n      setCreatedLink(live_link);\n      setRequestStatus('Finished');\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro no registro do funcionário',\n        description: 'Ocorreu um erro ao tentar registrar o funcionário, tente novamente.',\n        position: 'top',\n        duration: 5000\n      });\n    }\n  }, []);\n  const handleCemeteryChange = useCallback(async e => {\n    const selected = e.target.value;\n\n    if (!selected) {\n      setFunerals([]);\n      return;\n    }\n\n    const response = await api.get(`funerals/cemetery/${selected}`);\n    const funeralsResponse = response.data;\n    setFunerals(funeralsResponse);\n  }, [setFunerals]);\n  return ___EmotionJSX(Modal, {\n    size: \"full\",\n    isOpen: isOpen,\n    onClose: event => {\n      if (requestStatus === 'Loading') {\n        onClose(event);\n        setFunerals([]);\n        setRequestStatus(null);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(ModalContent, {\n    maxWidth: 980,\n    borderRadius: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, \"Gerar link do live chat\"), ___EmotionJSX(ModalCloseButton, {\n    onClick: event => {\n      onClose(event);\n      setFunerals([]);\n      setRequestStatus(null);\n    },\n    isDisabled: requestStatus !== 'Finished' && requestStatus !== null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }), ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBody, {\n    paddingBottom: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Input, {\n    name: \"name\",\n    placeholder: \"Nome do falecido\",\n    containerProps: {\n      width: 460,\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(Select, {\n    name: \"responsible_id\",\n    placeholder: \"Cliente respons\\xE1vel\",\n    bg: \"white\",\n    containerProps: {\n      marginLeft: 4,\n      width: 460,\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 15\n    }\n  }, customers.map(customer => ___EmotionJSX(\"option\", {\n    value: customer.id,\n    key: customer.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 19\n    }\n  }, customer.name))), ___EmotionJSX(Select, {\n    name: \"cemetery_for_funeral_selection_id\",\n    placeholder: \"Local da sala do vel\\xF3rio\",\n    bg: \"white\",\n    containerProps: {\n      marginLeft: 4,\n      width: 460,\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    onChange: handleCemeteryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 15\n    }\n  }, cemeteries.map(cemetery => ___EmotionJSX(\"option\", {\n    key: cemetery.id,\n    value: cemetery.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 19\n    }\n  }, cemetery.name))), ___EmotionJSX(Select, {\n    name: \"funeral_location_id\",\n    isDisabled: !(funerals.length > 0),\n    placeholder: \"Sala de vel\\xF3rio\",\n    bg: \"white\",\n    containerProps: {\n      marginLeft: 4,\n      width: 460,\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 15\n    }\n  }, funerals.map(funeral => ___EmotionJSX(\"option\", {\n    value: funeral.id,\n    key: funeral.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 19\n    }\n  }, funeral.name)))), ___EmotionJSX(Flex, {\n    marginTop: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(Select, {\n    name: \"sepulting_location_id\",\n    placeholder: \"Local do sepultamento\",\n    bg: \"white\",\n    containerProps: {\n      marginTop: 3,\n      marginRight: 4,\n      width: 460,\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    onChange: handleCemeteryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 15\n    }\n  }, cemeteries.map(cemetery => ___EmotionJSX(\"option\", {\n    key: cemetery.id,\n    value: cemetery.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }\n  }, cemetery.name))), ___EmotionJSX(DatePicker, {\n    name: \"funeral_date\",\n    placeholderText: \"Data do vel\\xF3rio\",\n    containerProps: {\n      marginTop: 3,\n      width: 460,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(TimePicker, {\n    name: \"funeral_initial_time\",\n    label: \"Hor\\xE1rio do in\\xEDcio do vel\\xF3rio\",\n    containerProps: {\n      width: 496,\n      marginLeft: 4,\n      marginTop: 3,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(TimePicker, {\n    name: \"funeral_final_time\",\n    label: \"Hor\\xE1rio do final do vel\\xF3rio\",\n    containerProps: {\n      width: 496,\n      marginLeft: 4,\n      marginTop: 3,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 15\n    }\n  })), ___EmotionJSX(Flex, {\n    marginTop: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }\n  }, ___EmotionJSX(DatePicker, {\n    name: \"sepulting_date\",\n    placeholderText: \"Data do sepultamento\",\n    containerProps: {\n      marginTop: 3,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 15\n    }\n  }), ___EmotionJSX(TimePicker, {\n    name: \"sepulting_time\",\n    label: \"Hor\\xE1rio dosepultamento\",\n    containerProps: {\n      marginLeft: 4,\n      marginTop: 3,\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 15\n    }\n  }))), ___EmotionJSX(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"ghost\",\n    onClick: event => {\n      onClose(event);\n      setFunerals([]);\n      setRequestStatus(null);\n    },\n    marginRight: 4,\n    isDisabled: requestStatus !== 'Finished' && requestStatus !== null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }\n  }, \"Cancelar\"), ___EmotionJSX(Button, {\n    type: \"submit\",\n    variantColor: \"green\",\n    isDisabled: requestStatus !== 'Finished' && requestStatus !== null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, \"Gerar link e enviar\"))), ___EmotionJSX(Flex, {\n    direction: \"column\",\n    hidden: requestStatus === null,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n    height: 200,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }\n  }, requestStatus === 'Loading' ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Text, {\n    color: \"gray.900\",\n    marginBottom: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 15\n    }\n  }, \"Gerando link...\"), ___EmotionJSX(CircularProgress, {\n    color: \"gray.900\",\n    isIndeterminate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 15\n    }\n  })) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Alert, {\n    status: \"success\",\n    variant: \"subtle\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    height: 200,\n    width: \"100%\",\n    marginBottom: 4,\n    marginLeft: 4,\n    marginRight: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 15\n    }\n  }, ___EmotionJSX(AlertIcon, {\n    mr: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 17\n    }\n  }), ___EmotionJSX(AlertTitle, {\n    mt: 4,\n    mb: 1,\n    fontSize: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 17\n    }\n  }, \"Link gerado!\"), ___EmotionJSX(AlertDescription, {\n    maxWidth: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 17\n    }\n  }, `O cliente pode assistir a live nesse link ${createdLink}`), ___EmotionJSX(Button, {\n    variant: \"ghost\",\n    onClick: event => {\n      onClose(event);\n      setFunerals([]);\n      setRequestStatus(null);\n    },\n    marginRight: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 17\n    }\n  }, \"Ok.\"))))));\n};\n\nexport default CreateDeceasedModal;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateDeceasedModal/index.tsx"],"names":["React","useCallback","useEffect","useRef","useState","Text","Button","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","Flex","useToast","CircularProgress","Alert","AlertIcon","AlertTitle","AlertDescription","Form","setHours","setMinutes","formatISO","Yup","DatePicker","Input","Select","TimePicker","getValidationErrors","api","CreateDeceasedModal","isOpen","onClose","onSave","formRef","toast","cemeteries","setCemeteries","customers","setCustomers","funerals","setFunerals","createdLink","setCreatedLink","requestStatus","setRequestStatus","get","then","response","cemeteriesResponse","data","customersResponse","handleSubmit","event","console","log","current","setErrors","schema","object","shape","name","string","required","responsible_id","uuid","cemetery_id","funeral_location_id","sepulting_location_id","funeral_date","date","funeral_initial_time","funeral_final_time","sepulting_date","sepulting_time","validate","abortEarly","funeralInitialDateTime","Date","Number","substr","funeralFinalDateTime","sepultingDateTime","submitData","funeral_initial_date","funeral_final_date","funeral_id","post","live_link","process","env","NEXT_PUBLIC_SITE_URL","id","status","title","description","position","duration","err","ValidationError","errors","handleCemeteryChange","e","selected","target","value","funeralsResponse","width","border","borderColor","bg","marginLeft","map","customer","cemetery","length","funeral","marginTop","marginRight","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;AAEA,SACEC,IADF,EAEEC,MAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,gBALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,WARF,EASEC,YATF,EAUEC,IAVF,EAWEC,QAXF,EAYEC,gBAZF,EAaEC,KAbF,EAcEC,SAdF,EAeEC,UAfF,EAgBEC,gBAhBF,QAiBO,iBAjBP;AAmBA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,UAAhD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;AAEA,OAAOC,GAAP,MAAgB,uBAAhB,C,CAEA;;;;AAuCA,MAAMC,mBAAwD,GAAG,CAAC;AAChEC,EAAAA,MADgE;AAEhEC,EAAAA,OAFgE;AAGhEC,EAAAA;AAHgE,CAAD,KAI3D;AACJ,QAAMC,OAAO,GAAGjC,MAAM,CAAc,IAAd,CAAtB;AAEA,QAAMkC,KAAK,GAAGtB,QAAQ,EAAtB;AAEA,QAAM;AAAA,OAACuB,UAAD;AAAA,OAAaC;AAAb,MAA8BnC,QAAQ,CAAa,EAAb,CAA5C;AACA,QAAM;AAAA,OAACoC,SAAD;AAAA,OAAYC;AAAZ,MAA4BrC,QAAQ,CAAc,EAAd,CAA1C;AACA,QAAM;AAAA,OAACsC,QAAD;AAAA,OAAWC;AAAX,MAA0BvC,QAAQ,CAAY,EAAZ,CAAxC;AAEA,QAAM;AAAA,OAACwC,WAAD;AAAA,OAAcC;AAAd,MAAgCzC,QAAQ,CAAS,EAAT,CAA9C;AAEA,QAAM;AAAA,OAAC0C,aAAD;AAAA,OAAgBC;AAAhB,MAAoC3C,QAAQ,CAEhD,IAFgD,CAAlD;AAIAF,EAAAA,SAAS,CAAC,MAAM;AACd6C,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAJ,IAAAA,WAAW,CAAC,EAAD,CAAX;AAEAZ,IAAAA,GAAG,CAACiB,GAAJ,CAAQ,YAAR,EAAsBC,IAAtB,CAA2BC,QAAQ,IAAI;AACrC,YAAMC,kBAA8B,GAAGD,QAAQ,CAACE,IAAhD;AAEAb,MAAAA,aAAa,CAACY,kBAAD,CAAb;AACD,KAJD;AAMApB,IAAAA,GAAG,CAACiB,GAAJ,CAAQ,WAAR,EAAqBC,IAArB,CAA0BC,QAAQ,IAAI;AACpC,YAAMG,iBAA6B,GAAGH,QAAQ,CAACE,IAA/C;AAEAX,MAAAA,YAAY,CAACY,iBAAD,CAAZ;AACD,KAJD;AAKD,GAfQ,EAeN,EAfM,CAAT;AAiBA,QAAMC,YAAY,GAAGrD,WAAW,CAAC,OAAOmD,IAAP,EAAwBG,KAAxB,KAAkC;AACjE,QAAI;AAAA;;AACFC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,0BAAArB,OAAO,CAACsB,OAAR,sEAAiBC,SAAjB,CAA2B,EAA3B;AAEA,YAAMC,MAAM,GAAGnC,GAAG,CAACoC,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,QAAAA,IAAI,EAAEtC,GAAG,CAACuC,MAAJ,GAAaC,QAAb,CAAsB,8BAAtB,CAD0B;AAEhCC,QAAAA,cAAc,EAAEzC,GAAG,CAACuC,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,CAA6B,yBAA7B,CAFgB;AAGhCG,QAAAA,WAAW,EAAE3C,GAAG,CAACuC,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,CAA6B,uBAA7B,CAHmB;AAIhCI,QAAAA,mBAAmB,EAAE5C,GAAG,CAACuC,MAAJ,GAClBG,IADkB,GAElBF,QAFkB,CAET,8BAFS,CAJW;AAOhCK,QAAAA,qBAAqB,EAAE7C,GAAG,CAACuC,MAAJ,GACpBG,IADoB,GAEpBF,QAFoB,CAEX,mCAFW,CAPS;AAUhCM,QAAAA,YAAY,EAAE9C,GAAG,CAAC+C,IAAJ,GAAWP,QAAX,CAAoB,6BAApB,CAVkB;AAWhCQ,QAAAA,oBAAoB,EAAEhD,GAAG,CAACuC,MAAJ,GAAaC,QAAb,CACpB,wCADoB,CAXU;AAchCS,QAAAA,kBAAkB,EAAEjD,GAAG,CAACuC,MAAJ,GAAaC,QAAb,CAClB,sCADkB,CAdY;AAiBhCU,QAAAA,cAAc,EAAElD,GAAG,CAAC+C,IAAJ,GAAWP,QAAX,CAAoB,kCAApB,CAjBgB;AAkBhCW,QAAAA,cAAc,EAAEnD,GAAG,CAACuC,MAAJ,GAAaC,QAAb,CACd,qCADc;AAlBgB,OAAnB,CAAf;AAuBA,YAAML,MAAM,CAACiB,QAAP,CAAgBzB,IAAhB,EAAsB;AAAE0B,QAAAA,UAAU,EAAE;AAAd,OAAtB,CAAN;AAEA/B,MAAAA,gBAAgB,CAAC,SAAD,CAAhB;AAEA,YAAMgC,sBAAsB,GAAGvD,SAAS,CACtCD,UAAU,CACRD,QAAQ,CACN,IAAI0D,IAAJ,CAAS5B,IAAI,CAACmB,YAAd,CADM,EAENU,MAAM,CAAC7B,IAAI,CAACqB,oBAAL,CAA0BS,MAA1B,CAAiC,CAAjC,EAAoC,CAApC,CAAD,CAFA,CADA,EAKRD,MAAM,CAAC7B,IAAI,CAACqB,oBAAL,CAA0BS,MAA1B,CAAiC,CAAjC,CAAD,CALE,CAD4B,CAAxC;AAUA,YAAMC,oBAAoB,GAAG3D,SAAS,CACpCD,UAAU,CACRD,QAAQ,CACN,IAAI0D,IAAJ,CAAS5B,IAAI,CAACmB,YAAd,CADM,EAENU,MAAM,CAAC7B,IAAI,CAACsB,kBAAL,CAAwBQ,MAAxB,CAA+B,CAA/B,EAAkC,CAAlC,CAAD,CAFA,CADA,EAKRD,MAAM,CAAC7B,IAAI,CAACsB,kBAAL,CAAwBQ,MAAxB,CAA+B,CAA/B,CAAD,CALE,CAD0B,CAAtC;AAUA,YAAME,iBAAiB,GAAG5D,SAAS,CACjCD,UAAU,CACRD,QAAQ,CACN,IAAI0D,IAAJ,CAAS5B,IAAI,CAACuB,cAAd,CADM,EAENM,MAAM,CAAC7B,IAAI,CAACwB,cAAL,CAAoBM,MAApB,CAA2B,CAA3B,EAA8B,CAA9B,CAAD,CAFA,CADA,EAKRD,MAAM,CAAC7B,IAAI,CAACwB,cAAL,CAAoBM,MAApB,CAA2B,CAA3B,CAAD,CALE,CADuB,CAAnC;AAUA,YAAMG,UAAU,GAAG;AACjBtB,QAAAA,IAAI,EAAEX,IAAI,CAACW,IADM;AAEjBG,QAAAA,cAAc,EAAEd,IAAI,CAACc,cAFJ;AAGjBoB,QAAAA,oBAAoB,EAAEP,sBAHL;AAIjBQ,QAAAA,kBAAkB,EAAEJ,oBAJH;AAKjBR,QAAAA,cAAc,EAAES,iBALC;AAMjBI,QAAAA,UAAU,EAAEpC,IAAI,CAACoC;AANA,OAAnB;AASA,YAAMtC,QAAkC,GAAG,MAAMnB,GAAG,CAAC0D,IAAJ,CAC/C,WAD+C,EAE/CJ,UAF+C,CAAjD;AAKA,YAAMK,SAAS,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,YAAW3C,QAAQ,CAACE,IAAT,CAAc0C,EAAG,EAAlF;;AAEA,UAAI,CAACJ,SAAL,EAAgB;AACdrD,QAAAA,KAAK,CAAC;AACJ0D,UAAAA,MAAM,EAAE,OADJ;AAEJC,UAAAA,KAAK,EAAE,8BAFH;AAGJC,UAAAA,WAAW,EACT,kEAJE;AAKJC,UAAAA,QAAQ,EAAE,KALN;AAMJC,UAAAA,QAAQ,EAAE;AANN,SAAD,CAAL;AASAjE,QAAAA,OAAO,CAACqB,KAAD,CAAP;AACAZ,QAAAA,WAAW,CAAC,EAAD,CAAX;AACAI,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA;AACD;;AAEDF,MAAAA,cAAc,CAAC6C,SAAD,CAAd;AACA3C,MAAAA,gBAAgB,CAAC,UAAD,CAAhB;AACAZ,MAAAA,MAAM;AACP,KAjGD,CAiGE,OAAOiE,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAY3E,GAAG,CAAC4E,eAAvB,EAAwC;AAAA;;AACtC,cAAMC,MAAM,GAAGxE,mBAAmB,CAACsE,GAAD,CAAlC;AAEA,6BAAAhE,OAAO,CAACsB,OAAR,wEAAiBC,SAAjB,CAA2B2C,MAA3B;AAEA;AACD;;AAEDjE,MAAAA,KAAK,CAAC;AACJ0D,QAAAA,MAAM,EAAE,OADJ;AAEJC,QAAAA,KAAK,EAAE,iCAFH;AAGJC,QAAAA,WAAW,EACT,qEAJE;AAKJC,QAAAA,QAAQ,EAAE,KALN;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQD;AACF,GApH+B,EAoH7B,EApH6B,CAAhC;AAsHA,QAAMI,oBAAoB,GAAGtG,WAAW,CACtC,MAAMuG,CAAN,IAAW;AACT,UAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;;AACA,QAAI,CAACF,QAAL,EAAe;AACb9D,MAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AACD;;AACD,UAAMO,QAAQ,GAAG,MAAMnB,GAAG,CAACiB,GAAJ,CAAS,qBAAoByD,QAAS,EAAtC,CAAvB;AACA,UAAMG,gBAAgB,GAAG1D,QAAQ,CAACE,IAAlC;AAEAT,IAAAA,WAAW,CAACiE,gBAAD,CAAX;AACD,GAXqC,EAYtC,CAACjE,WAAD,CAZsC,CAAxC;AAeA,SACE,cAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,MAAM,EAAEV,MAFV;AAGE,IAAA,OAAO,EAAEsB,KAAK,IAAI;AAChB,UAAIT,aAAa,KAAK,SAAtB,EAAiC;AAC/BZ,QAAAA,OAAO,CAACqB,KAAD,CAAP;AACAZ,QAAAA,WAAW,CAAC,EAAD,CAAX;AACAI,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,cAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAaE,cAAC,YAAD;AAAc,IAAA,QAAQ,EAAE,GAAxB;AAA6B,IAAA,YAAY,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE,cAAC,gBAAD;AACE,IAAA,OAAO,EAAEQ,KAAK,IAAI;AAChBrB,MAAAA,OAAO,CAACqB,KAAD,CAAP;AACAZ,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAI,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KALH;AAME,IAAA,UAAU,EAAED,aAAa,KAAK,UAAlB,IAAgCA,aAAa,KAAK,IANhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAWE,cAAC,IAAD;AAAM,IAAA,GAAG,EAAEV,OAAX;AAAoB,IAAA,QAAQ,EAAEkB,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,SAAD;AAAW,IAAA,aAAa,EAAE,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,kBAFd;AAGE,IAAA,cAAc,EAAE;AACduD,MAAAA,KAAK,EAAE,GADO;AAEdC,MAAAA,MAAM,EAAE,WAFM;AAGdC,MAAAA,WAAW,EAAE,UAHC;AAIdC,MAAAA,EAAE,EAAE;AAJU,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,cAAC,MAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,WAAW,EAAC,wBAFd;AAGE,IAAA,EAAE,EAAC,OAHL;AAIE,IAAA,cAAc,EAAE;AACdC,MAAAA,UAAU,EAAE,CADE;AAEdJ,MAAAA,KAAK,EAAE,GAFO;AAGdC,MAAAA,MAAM,EAAE,WAHM;AAIdC,MAAAA,WAAW,EAAE,UAJC;AAKdC,MAAAA,EAAE,EAAE;AALU,KAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGxE,SAAS,CAAC0E,GAAV,CAAcC,QAAQ,IACrB;AAAQ,IAAA,KAAK,EAAEA,QAAQ,CAACrB,EAAxB;AAA4B,IAAA,GAAG,EAAEqB,QAAQ,CAACrB,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGqB,QAAQ,CAACpD,IADZ,CADD,CAZH,CAZF,EA+BE,cAAC,MAAD;AACE,IAAA,IAAI,EAAC,mCADP;AAEE,IAAA,WAAW,EAAC,6BAFd;AAGE,IAAA,EAAE,EAAC,OAHL;AAIE,IAAA,cAAc,EAAE;AACdkD,MAAAA,UAAU,EAAE,CADE;AAEdJ,MAAAA,KAAK,EAAE,GAFO;AAGdC,MAAAA,MAAM,EAAE,WAHM;AAIdC,MAAAA,WAAW,EAAE,UAJC;AAKdC,MAAAA,EAAE,EAAE;AALU,KAJlB;AAWE,IAAA,QAAQ,EAAET,oBAXZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGjE,UAAU,CAAC4E,GAAX,CAAeE,QAAQ,IACtB;AAAQ,IAAA,GAAG,EAAEA,QAAQ,CAACtB,EAAtB;AAA0B,IAAA,KAAK,EAAEsB,QAAQ,CAACtB,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,QAAQ,CAACrD,IADZ,CADD,CAbH,CA/BF,EAmDE,cAAC,MAAD;AACE,IAAA,IAAI,EAAC,qBADP;AAEE,IAAA,UAAU,EAAE,EAAErB,QAAQ,CAAC2E,MAAT,GAAkB,CAApB,CAFd;AAGE,IAAA,WAAW,EAAC,oBAHd;AAIE,IAAA,EAAE,EAAC,OAJL;AAKE,IAAA,cAAc,EAAE;AACdJ,MAAAA,UAAU,EAAE,CADE;AAEdJ,MAAAA,KAAK,EAAE,GAFO;AAGdC,MAAAA,MAAM,EAAE,WAHM;AAIdC,MAAAA,WAAW,EAAE,UAJC;AAKdC,MAAAA,EAAE,EAAE;AALU,KALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGtE,QAAQ,CAACwE,GAAT,CAAaI,OAAO,IACnB;AAAQ,IAAA,KAAK,EAAEA,OAAO,CAACxB,EAAvB;AAA2B,IAAA,GAAG,EAAEwB,OAAO,CAACxB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGwB,OAAO,CAACvD,IADX,CADD,CAbH,CAnDF,CADF,EAyEE,cAAC,IAAD;AAAM,IAAA,SAAS,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,MAAD;AACE,IAAA,IAAI,EAAC,uBADP;AAEE,IAAA,WAAW,EAAC,uBAFd;AAGE,IAAA,EAAE,EAAC,OAHL;AAIE,IAAA,cAAc,EAAE;AACdwD,MAAAA,SAAS,EAAE,CADG;AAEdC,MAAAA,WAAW,EAAE,CAFC;AAGdX,MAAAA,KAAK,EAAE,GAHO;AAIdC,MAAAA,MAAM,EAAE,WAJM;AAKdC,MAAAA,WAAW,EAAE,UALC;AAMdC,MAAAA,EAAE,EAAE;AANU,KAJlB;AAYE,IAAA,QAAQ,EAAET,oBAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGjE,UAAU,CAAC4E,GAAX,CAAeE,QAAQ,IACtB;AAAQ,IAAA,GAAG,EAAEA,QAAQ,CAACtB,EAAtB;AAA0B,IAAA,KAAK,EAAEsB,QAAQ,CAACtB,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,QAAQ,CAACrD,IADZ,CADD,CAdH,CADF,EAqBE,cAAC,UAAD;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,eAAe,EAAC,oBAFlB;AAGE,IAAA,cAAc,EAAE;AACdwD,MAAAA,SAAS,EAAE,CADG;AAEdV,MAAAA,KAAK,EAAE,GAFO;AAGdY,MAAAA,KAAK,EAAE;AAHO,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EA8BE,cAAC,UAAD;AACE,IAAA,IAAI,EAAC,sBADP;AAEE,IAAA,KAAK,EAAC,uCAFR;AAGE,IAAA,cAAc,EAAE;AACdZ,MAAAA,KAAK,EAAE,GADO;AAEdI,MAAAA,UAAU,EAAE,CAFE;AAGdM,MAAAA,SAAS,EAAE,CAHG;AAIdE,MAAAA,KAAK,EAAE;AAJO,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,EAwCE,cAAC,UAAD;AACE,IAAA,IAAI,EAAC,oBADP;AAEE,IAAA,KAAK,EAAC,mCAFR;AAGE,IAAA,cAAc,EAAE;AACdZ,MAAAA,KAAK,EAAE,GADO;AAEdI,MAAAA,UAAU,EAAE,CAFE;AAGdM,MAAAA,SAAS,EAAE,CAHG;AAIdE,MAAAA,KAAK,EAAE;AAJO,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCF,CAzEF,EA6HE,cAAC,IAAD;AAAM,IAAA,SAAS,EAAE,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,UAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,eAAe,EAAC,sBAFlB;AAGE,IAAA,cAAc,EAAE;AAAEF,MAAAA,SAAS,EAAE,CAAb;AAAgBE,MAAAA,KAAK,EAAE;AAAvB,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,cAAC,UAAD;AACE,IAAA,IAAI,EAAC,gBADP;AAEE,IAAA,KAAK,EAAC,2BAFR;AAGE,IAAA,cAAc,EAAE;AACdR,MAAAA,UAAU,EAAE,CADE;AAEdM,MAAAA,SAAS,EAAE,CAFG;AAGdE,MAAAA,KAAK,EAAE;AAHO,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CA7HF,CADF,EAgJE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,MAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,OAAO,EAAElE,KAAK,IAAI;AAChBrB,MAAAA,OAAO,CAACqB,KAAD,CAAP;AACAZ,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAI,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KANH;AAOE,IAAA,WAAW,EAAE,CAPf;AAQE,IAAA,UAAU,EACRD,aAAa,KAAK,UAAlB,IAAgCA,aAAa,KAAK,IATtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAgBE,cAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,YAAY,EAAC,OAFf;AAGE,IAAA,UAAU,EACRA,aAAa,KAAK,UAAlB,IAAgCA,aAAa,KAAK,IAJtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAhBF,CAhJF,CAXF,EAsLE,cAAC,IAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,MAAM,EAAEA,aAAa,KAAK,IAF5B;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,cAAc,EAAC,QAJjB;AAKE,IAAA,eAAe,EAAC,OALlB;AAME,IAAA,KAAK,EAAC,MANR;AAOE,IAAA,MAAM,EAAE,GAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGA,aAAa,KAAK,SAAlB,GACC,oCACE,cAAC,IAAD;AAAM,IAAA,KAAK,EAAC,UAAZ;AAAuB,IAAA,YAAY,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE,cAAC,gBAAD;AAAkB,IAAA,KAAK,EAAC,UAAxB;AAAmC,IAAA,eAAe,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADD,GAQC,oCACE,cAAC,KAAD;AACE,IAAA,MAAM,EAAC,SADT;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,aAAa,EAAC,QAHhB;AAIE,IAAA,UAAU,EAAC,QAJb;AAKE,IAAA,cAAc,EAAC,QALjB;AAME,IAAA,SAAS,EAAC,QANZ;AAOE,IAAA,MAAM,EAAE,GAPV;AAQE,IAAA,KAAK,EAAC,MARR;AASE,IAAA,YAAY,EAAE,CAThB;AAUE,IAAA,UAAU,EAAE,CAVd;AAWE,IAAA,WAAW,EAAE,CAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,cAAC,SAAD;AAAW,IAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAcE,cAAC,UAAD;AAAY,IAAA,EAAE,EAAE,CAAhB;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAA0B,IAAA,QAAQ,EAAC,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF,EAiBE,cAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,6CAA4CF,WAAY,EAD5D,CAjBF,EAoBE,cAAC,MAAD;AACE,IAAA,OAAO,EAAC,OADV;AAEE,IAAA,OAAO,EAAEW,KAAK,IAAI;AAChBrB,MAAAA,OAAO,CAACqB,KAAD,CAAP;AACAZ,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAI,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KANH;AAOE,IAAA,WAAW,EAAE,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WApBF,CADF,CAjBJ,CAtLF,CAbF,CADF;AA4PD,CAraD;;AAuaA,eAAef,mBAAf","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport {\n  Text,\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Flex,\n  useToast,\n  CircularProgress,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/core';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport { setHours, setMinutes, formatISO } from 'date-fns';\nimport * as Yup from 'yup';\n\nimport DatePicker from '@/components/DatePicker';\nimport Input from '@/components/Input';\nimport Select from '@/components/Select';\nimport TimePicker from '@/components/TimePicker';\nimport getValidationErrors from '@/utils/getValidationErrors';\n\nimport api from '../../../services/api';\n\n// eslint-disable-next-line\ninterface Customers {\n  id: string;\n  name: string;\n}\n\n// eslint-disable-next-line\ninterface Cemetery {\n  id: string;\n  name: string;\n}\n\n// eslint-disable-next-line\ninterface Funeral {\n  id: string;\n  name: string;\n}\n\ninterface IFormData {\n  name: string;\n  responsible_id: string;\n  cemetery_id: string;\n  funeral_id: string;\n  funeral_date: Date;\n  funeral_initial_time: string;\n  funeral_final_time: string;\n  sepulting_date: Date;\n  sepulting_time: string;\n}\n\ninterface ICreateDeceasedModalProps {\n  isOpen: boolean;\n  onClose?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason?: 'pressedEscape' | 'clickedOverlay',\n  ) => void;\n  onSave: () => void;\n}\n\nconst CreateDeceasedModal: React.FC<ICreateDeceasedModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n\n  const toast = useToast();\n\n  const [cemeteries, setCemeteries] = useState<Cemetery[]>([] as Cemetery[]);\n  const [customers, setCustomers] = useState<Customers[]>([] as Customers[]);\n  const [funerals, setFunerals] = useState<Funeral[]>([] as Funeral[]);\n\n  const [createdLink, setCreatedLink] = useState<string>('');\n\n  const [requestStatus, setRequestStatus] = useState<\n    'Loading' | 'Finished' | null\n  >(null);\n\n  useEffect(() => {\n    setRequestStatus(null);\n    setFunerals([] as Funeral[]);\n\n    api.get('cemeteries').then(response => {\n      const cemeteriesResponse: Cemetery[] = response.data;\n\n      setCemeteries(cemeteriesResponse);\n    });\n\n    api.get('customers').then(response => {\n      const customersResponse: Cemetery[] = response.data;\n\n      setCustomers(customersResponse);\n    });\n  }, []);\n\n  const handleSubmit = useCallback(async (data: IFormData, event) => {\n    try {\n      console.log('sd');\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome do falecido obrigatório'),\n        responsible_id: Yup.string().uuid().required('Responsável obrigatório'),\n        cemetery_id: Yup.string().uuid().required('Cemitério obrigatório'),\n        funeral_location_id: Yup.string()\n          .uuid()\n          .required('Local do velório obrigatório'),\n        sepulting_location_id: Yup.string()\n          .uuid()\n          .required('Local do sepultamento obrigatório'),\n        funeral_date: Yup.date().required('Data do velório obrigatório'),\n        funeral_initial_time: Yup.string().required(\n          'Horário inicial do velório obrigatório',\n        ),\n        funeral_final_time: Yup.string().required(\n          'Horário final do velório obrigatório',\n        ),\n        sepulting_date: Yup.date().required('Data do sepultamento obrigatório'),\n        sepulting_time: Yup.string().required(\n          'Horário do sepultamento obrigatório',\n        ),\n      });\n\n      await schema.validate(data, { abortEarly: false });\n\n      setRequestStatus('Loading');\n\n      const funeralInitialDateTime = formatISO(\n        setMinutes(\n          setHours(\n            new Date(data.funeral_date),\n            Number(data.funeral_initial_time.substr(0, 2)),\n          ),\n          Number(data.funeral_initial_time.substr(3)),\n        ),\n      );\n\n      const funeralFinalDateTime = formatISO(\n        setMinutes(\n          setHours(\n            new Date(data.funeral_date),\n            Number(data.funeral_final_time.substr(0, 2)),\n          ),\n          Number(data.funeral_final_time.substr(3)),\n        ),\n      );\n\n      const sepultingDateTime = formatISO(\n        setMinutes(\n          setHours(\n            new Date(data.sepulting_date),\n            Number(data.sepulting_time.substr(0, 2)),\n          ),\n          Number(data.sepulting_time.substr(3)),\n        ),\n      );\n\n      const submitData = {\n        name: data.name,\n        responsible_id: data.responsible_id,\n        funeral_initial_date: funeralInitialDateTime,\n        funeral_final_date: funeralFinalDateTime,\n        sepulting_date: sepultingDateTime,\n        funeral_id: data.funeral_id,\n      };\n\n      const response: { data: { id: string } } = await api.post(\n        'deceaseds',\n        submitData,\n      );\n\n      const live_link = `${process.env.NEXT_PUBLIC_SITE_URL}/live?id=${response.data.id}`;\n\n      if (!live_link) {\n        toast({\n          status: 'error',\n          title: 'Erro no registro de falecido',\n          description:\n            'Ocorreu um erro ao tentar registrar o falecido, tente novamente.',\n          position: 'top',\n          duration: 5000,\n        });\n\n        onClose(event);\n        setFunerals([]);\n        setRequestStatus(null);\n\n        return;\n      }\n\n      setCreatedLink(live_link);\n      setRequestStatus('Finished');\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n\n        formRef.current?.setErrors(errors);\n\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro no registro do funcionário',\n        description:\n          'Ocorreu um erro ao tentar registrar o funcionário, tente novamente.',\n        position: 'top',\n        duration: 5000,\n      });\n    }\n  }, []);\n\n  const handleCemeteryChange = useCallback(\n    async e => {\n      const selected = e.target.value;\n      if (!selected) {\n        setFunerals([]);\n        return;\n      }\n      const response = await api.get(`funerals/cemetery/${selected}`);\n      const funeralsResponse = response.data;\n\n      setFunerals(funeralsResponse);\n    },\n    [setFunerals],\n  );\n\n  return (\n    <Modal\n      size=\"full\"\n      isOpen={isOpen}\n      onClose={event => {\n        if (requestStatus === 'Loading') {\n          onClose(event);\n          setFunerals([]);\n          setRequestStatus(null);\n        }\n      }}\n    >\n      <ModalOverlay />\n\n      <ModalContent maxWidth={980} borderRadius=\"md\">\n        <ModalHeader>Gerar link do live chat</ModalHeader>\n        <ModalCloseButton\n          onClick={event => {\n            onClose(event);\n            setFunerals([]);\n            setRequestStatus(null);\n          }}\n          isDisabled={requestStatus !== 'Finished' && requestStatus !== null}\n        />\n\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <ModalBody paddingBottom={4}>\n            <Flex>\n              <Input\n                name=\"name\"\n                placeholder=\"Nome do falecido\"\n                containerProps={{\n                  width: 460,\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n              />\n\n              <Select\n                name=\"responsible_id\"\n                placeholder=\"Cliente responsável\"\n                bg=\"white\"\n                containerProps={{\n                  marginLeft: 4,\n                  width: 460,\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n              >\n                {customers.map(customer => (\n                  <option value={customer.id} key={customer.id}>\n                    {customer.name}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                name=\"cemetery_for_funeral_selection_id\"\n                placeholder=\"Local da sala do velório\"\n                bg=\"white\"\n                containerProps={{\n                  marginLeft: 4,\n                  width: 460,\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n                onChange={handleCemeteryChange}\n              >\n                {cemeteries.map(cemetery => (\n                  <option key={cemetery.id} value={cemetery.id}>\n                    {cemetery.name}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                name=\"funeral_location_id\"\n                isDisabled={!(funerals.length > 0)}\n                placeholder=\"Sala de velório\"\n                bg=\"white\"\n                containerProps={{\n                  marginLeft: 4,\n                  width: 460,\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n              >\n                {funerals.map(funeral => (\n                  <option value={funeral.id} key={funeral.id}>\n                    {funeral.name}\n                  </option>\n                ))}\n              </Select>\n            </Flex>\n\n            <Flex marginTop={4}>\n              <Select\n                name=\"sepulting_location_id\"\n                placeholder=\"Local do sepultamento\"\n                bg=\"white\"\n                containerProps={{\n                  marginTop: 3,\n                  marginRight: 4,\n                  width: 460,\n                  border: '1px solid',\n                  borderColor: 'gray.400',\n                  bg: 'white',\n                }}\n                onChange={handleCemeteryChange}\n              >\n                {cemeteries.map(cemetery => (\n                  <option key={cemetery.id} value={cemetery.id}>\n                    {cemetery.name}\n                  </option>\n                ))}\n              </Select>\n              <DatePicker\n                name=\"funeral_date\"\n                placeholderText=\"Data do velório\"\n                containerProps={{\n                  marginTop: 3,\n                  width: 460,\n                  color: 'black',\n                }}\n              />\n              <TimePicker\n                name=\"funeral_initial_time\"\n                label=\"Horário do início do velório\"\n                containerProps={{\n                  width: 496,\n                  marginLeft: 4,\n                  marginTop: 3,\n                  color: 'black',\n                }}\n              />\n              <TimePicker\n                name=\"funeral_final_time\"\n                label=\"Horário do final do velório\"\n                containerProps={{\n                  width: 496,\n                  marginLeft: 4,\n                  marginTop: 3,\n                  color: 'black',\n                }}\n              />\n            </Flex>\n\n            <Flex marginTop={4}>\n              <DatePicker\n                name=\"sepulting_date\"\n                placeholderText=\"Data do sepultamento\"\n                containerProps={{ marginTop: 3, color: 'black' }}\n              />\n              <TimePicker\n                name=\"sepulting_time\"\n                label=\"Horário dosepultamento\"\n                containerProps={{\n                  marginLeft: 4,\n                  marginTop: 3,\n                  color: 'black',\n                }}\n              />\n            </Flex>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              variant=\"ghost\"\n              onClick={event => {\n                onClose(event);\n                setFunerals([]);\n                setRequestStatus(null);\n              }}\n              marginRight={4}\n              isDisabled={\n                requestStatus !== 'Finished' && requestStatus !== null\n              }\n            >\n              Cancelar\n            </Button>\n\n            <Button\n              type=\"submit\"\n              variantColor=\"green\"\n              isDisabled={\n                requestStatus !== 'Finished' && requestStatus !== null\n              }\n            >\n              Gerar link e enviar\n            </Button>\n          </ModalFooter>\n        </Form>\n        <Flex\n          direction=\"column\"\n          hidden={requestStatus === null}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          backgroundColor=\"white\"\n          width=\"100%\"\n          height={200}\n        >\n          {requestStatus === 'Loading' ? (\n            <>\n              <Text color=\"gray.900\" marginBottom={2}>\n                Gerando link...\n              </Text>\n              <CircularProgress color=\"gray.900\" isIndeterminate />\n            </>\n          ) : (\n            <>\n              <Alert\n                status=\"success\"\n                variant=\"subtle\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                textAlign=\"center\"\n                height={200}\n                width=\"100%\"\n                marginBottom={4}\n                marginLeft={4}\n                marginRight={4}\n              >\n                <AlertIcon mr={0} />\n                <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n                  Link gerado!\n                </AlertTitle>\n                <AlertDescription maxWidth=\"sm\">\n                  {`O cliente pode assistir a live nesse link ${createdLink}`}\n                </AlertDescription>\n                <Button\n                  variant=\"ghost\"\n                  onClick={event => {\n                    onClose(event);\n                    setFunerals([]);\n                    setRequestStatus(null);\n                  }}\n                  marginRight={4}\n                >\n                  Ok.\n                </Button>\n              </Alert>\n            </>\n          )}\n        </Flex>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateDeceasedModal;\n"]},"metadata":{},"sourceType":"module"}