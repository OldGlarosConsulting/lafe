{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useRef } from 'react';\nimport { FiLock, FiMail } from 'react-icons/fi';\nimport NextLink from 'next/link';\nimport { useRouter } from 'next/router';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport SEO from '@/components/SEO';\nimport { useAuthentication } from '@/hooks/authentication';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport { useToast, Button, Flex, Heading, Link } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst Login = () => {\n  const formRef = useRef(null);\n  const router = useRouter();\n  const toast = useToast();\n  const {\n    logIn\n  } = useAuthentication();\n  const handleSubmit = useCallback(async data => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        email: Yup.string().email().required('E-mail obrigatório'),\n        password: Yup.string().required('Senha obrigatória')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      await logIn(data);\n      toast({\n        status: 'success',\n        title: 'Autenticado com sucesso',\n        description: 'Você está sendo redirecionado para a página inicial.',\n        position: 'top',\n        duration: 3000\n      });\n      router.replace('/dashboard');\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro na autenticação',\n        description: 'Ocorreu um erro ao fazer login, cheque as credenciais.',\n        position: 'top',\n        duration: 5000\n      });\n    }\n  }, [logIn, router, toast]);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(SEO, {\n    title: \"Lafe\",\n    image: \"og/boost.png\",\n    shouldExcludeTitleSuffix: true,\n    description: \"Fazer login na plataforma\"\n  }), ___EmotionJSX(Flex, {\n    as: \"main\",\n    height: \"100vh\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingX: 6,\n    backgroundColor: \"blue.300\"\n  }, ___EmotionJSX(Flex, {\n    backgroundColor: \"blue.500\",\n    borderRadius: \"md\",\n    flexDirection: \"column\",\n    alignItems: \"stretch\",\n    padding: 16,\n    boxShadow: \"xl\"\n  }, ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit\n  }, ___EmotionJSX(Heading, {\n    color: \"White\",\n    marginBottom: 6\n  }, \"Login\"), ___EmotionJSX(Input, {\n    name: \"email\",\n    icon: FiMail,\n    placeholder: \"E-mail\"\n  }), ___EmotionJSX(Input, {\n    name: \"password\",\n    icon: FiLock,\n    type: \"password\",\n    placeholder: \"Senha\",\n    containerProps: {\n      marginTop: 3\n    }\n  }), ___EmotionJSX(Button, {\n    type: \"submit\",\n    bg: \"blue.300\",\n    color: \"gray.800\",\n    _hover: {\n      bg: 'blue.400',\n      color: 'gray.900'\n    },\n    _focusWithin: {\n      bg: 'blue.400',\n      color: 'gray.900'\n    },\n    width: \"100%\",\n    marginY: 4,\n    paddingY: 6\n  }, \"Entrar\"), ___EmotionJSX(NextLink, {\n    href: \"forgot-password\"\n  }, ___EmotionJSX(Link, {\n    color: \"blue.100\"\n  }, \"Esqueci minha senha\"))))));\n};\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}