{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/SetUsernameForLiveTelespectors/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef } from 'react';\nimport { Button, Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useToast } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst CreateEmpployeesModal = ({\n  isOpen,\n  onSave\n}) => {\n  const toast = useToast();\n  const formRef = useRef(null);\n  const handleSubmit = useCallback(async data => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome obrigatório')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      onSave(data.name);\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n      }\n    }\n  }, [onSave]);\n  return ___EmotionJSX(Modal, {\n    isOpen: isOpen,\n    onClose: () => {\n      toast({\n        status: 'error',\n        title: 'Não é possível assistir a live sem se identificar',\n        position: 'bottom-right',\n        duration: 3000\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(ModalContent, {\n    borderRadius: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Por favor informe seu nome, para que putras pessoas te identifiquem no chat\"), ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBody, {\n    paddingBottom: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Input, {\n    name: \"name\",\n    placeholder: \"Nome\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })), ___EmotionJSX(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Button, {\n    type: \"submit\",\n    variantColor: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Confirmar\")))));\n};\n\nexport default CreateEmpployeesModal;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/SetUsernameForLiveTelespectors/index.tsx"],"names":["React","useCallback","useRef","Button","Modal","ModalBody","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useToast","Form","Yup","Input","getValidationErrors","CreateEmpployeesModal","isOpen","onSave","toast","formRef","handleSubmit","data","current","setErrors","schema","object","shape","name","string","required","validate","abortEarly","err","ValidationError","errors","status","title","position","duration","border","borderColor","bg"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,SACEC,MADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,WANF,EAOEC,YAPF,EAQEC,QARF,QASO,iBATP;AAWA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;;;AAkBA,MAAMC,qBAA4D,GAAG,CAAC;AACpEC,EAAAA,MADoE;AAEpEC,EAAAA;AAFoE,CAAD,KAG/D;AACJ,QAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,QAAMS,OAAO,GAAGjB,MAAM,CAAc,IAAd,CAAtB;AAEA,QAAMkB,YAAY,GAAGnB,WAAW,CAC9B,MAAOoB,IAAP,IAAkC;AAChC,QAAI;AAAA;;AACF,0BAAAF,OAAO,CAACG,OAAR,sEAAiBC,SAAjB,CAA2B,EAA3B;AAEA,YAAMC,MAAM,GAAGZ,GAAG,CAACa,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,QAAAA,IAAI,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB;AAD0B,OAAnB,CAAf;AAIA,YAAML,MAAM,CAACM,QAAP,CAAgBT,IAAhB,EAAsB;AAAEU,QAAAA,UAAU,EAAE;AAAd,OAAtB,CAAN;AAEAd,MAAAA,MAAM,CAACI,IAAI,CAACM,IAAN,CAAN;AACD,KAVD,CAUE,OAAOK,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYpB,GAAG,CAACqB,eAAvB,EAAwC;AAAA;;AACtC,cAAMC,MAAM,GAAGpB,mBAAmB,CAACkB,GAAD,CAAlC;AAEA,6BAAAb,OAAO,CAACG,OAAR,wEAAiBC,SAAjB,CAA2BW,MAA3B;AACD;AACF;AACF,GAnB6B,EAoB9B,CAACjB,MAAD,CApB8B,CAAhC;AAuBA,SACE,cAAC,KAAD;AACE,IAAA,MAAM,EAAED,MADV;AAEE,IAAA,OAAO,EAAE,MAAM;AACbE,MAAAA,KAAK,CAAC;AACJiB,QAAAA,MAAM,EAAE,OADJ;AAEJC,QAAAA,KAAK,EAAE,mDAFH;AAGJC,QAAAA,QAAQ,EAAE,cAHN;AAIJC,QAAAA,QAAQ,EAAE;AAJN,OAAD,CAAL;AAMD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE,cAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAaE,cAAC,YAAD;AAAc,IAAA,YAAY,EAAC,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADF,EAKE,cAAC,IAAD;AAAM,IAAA,GAAG,EAAEnB,OAAX;AAAoB,IAAA,QAAQ,EAAEC,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,SAAD;AAAW,IAAA,aAAa,EAAE,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,KAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,cAAc,EAAE;AACdmB,MAAAA,MAAM,EAAE,WADM;AAEdC,MAAAA,WAAW,EAAE,UAFC;AAGdC,MAAAA,EAAE,EAAE;AAHU,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAaE,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,YAAY,EAAC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAbF,CALF,CAbF,CADF;AAyCD,CAvED;;AAyEA,eAAe1B,qBAAf","sourcesContent":["import React, { useCallback, useRef } from 'react';\n\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from '@chakra-ui/core';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\n\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\n\ninterface IFormData {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n}\n\ninterface ICreateEmpployeesModalProps {\n  isOpen: boolean;\n  onClose?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason?: 'pressedEscape' | 'clickedOverlay',\n  ) => void;\n  onSave: (name) => void;\n}\n\nconst CreateEmpployeesModal: React.FC<ICreateEmpployeesModalProps> = ({\n  isOpen,\n  onSave,\n}) => {\n  const toast = useToast();\n  const formRef = useRef<FormHandles>(null);\n\n  const handleSubmit = useCallback(\n    async (data: { name: string }) => {\n      try {\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome obrigatório'),\n        });\n\n        await schema.validate(data, { abortEarly: false });\n\n        onSave(data.name);\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n        }\n      }\n    },\n    [onSave],\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={() => {\n        toast({\n          status: 'error',\n          title: 'Não é possível assistir a live sem se identificar',\n          position: 'bottom-right',\n          duration: 3000,\n        });\n      }}\n    >\n      <ModalOverlay />\n\n      <ModalContent borderRadius=\"md\">\n        <ModalHeader>\n          Por favor informe seu nome, para que putras pessoas te identifiquem no\n          chat\n        </ModalHeader>\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <ModalBody paddingBottom={4}>\n            <Input\n              name=\"name\"\n              placeholder=\"Nome\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n              }}\n            />\n          </ModalBody>\n\n          <ModalFooter>\n            <Button type=\"submit\" variantColor=\"green\">\n              Confirmar\n            </Button>\n          </ModalFooter>\n        </Form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateEmpployeesModal;\n"]},"metadata":{},"sourceType":"module"}