{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/DatePicker/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport formatWeekDay from './utils/formatWeekDay';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst DatePicker = (_ref) => {\n  let {\n    name,\n    containerProps\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"containerProps\"]);\n\n  const datePickerRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const {\n    0: selected,\n    1: setSelected\n  } = useState(defaultValue);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: datePickerRef.current,\n      path: 'props.selected'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    borderRadius: \"md\",\n    isErrored: !!error\n  }, containerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(ReactDatePicker, _extends({\n    ref: datePickerRef,\n    selected: selected,\n    showPopperArrow: false,\n    dateFormat: \"dd/MM/yyyy\",\n    formatWeekDay: formatWeekDay,\n    placeholderText: \"Data\",\n    onChange: date => {\n      setSelected(date);\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default DatePicker;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/DatePicker/index.tsx"],"names":["React","useEffect","useRef","useState","ReactDatePicker","useField","Container","formatWeekDay","DatePicker","name","containerProps","rest","datePickerRef","fieldName","defaultValue","error","registerField","selected","setSelected","ref","current","path","date"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,eAAP,MAAsD,kBAAtD;AAGA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,aAAP,MAA0B,uBAA1B;;;AAWA,MAAMC,UAAsC,GAAG,UAIzC;AAAA,MAJ0C;AAC9CC,IAAAA,IAD8C;AAE9CC,IAAAA;AAF8C,GAI1C;AAAA,MADDC,IACC;;AACJ,QAAMC,aAAa,GAAGV,MAAM,CAAkB,IAAlB,CAA5B;AAEA,QAAM;AAAEW,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDX,QAAQ,CAACI,IAAD,CAAlE;AAEA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAACW,YAAD,CAAxC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa,CAAC;AACZP,MAAAA,IAAI,EAAEI,SADM;AAEZM,MAAAA,GAAG,EAAEP,aAAa,CAACQ,OAFP;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACR,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,SACE,cAAC,SAAD;AAAW,IAAA,YAAY,EAAC,IAAxB;AAA6B,IAAA,SAAS,EAAE,CAAC,CAACD;AAA1C,KAAqDL,cAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,cAAC,eAAD;AACE,IAAA,GAAG,EAAEE,aADP;AAEE,IAAA,QAAQ,EAAEK,QAFZ;AAGE,IAAA,eAAe,EAAE,KAHnB;AAIE,IAAA,UAAU,EAAC,YAJb;AAKE,IAAA,aAAa,EAAEV,aALjB;AAME,IAAA,eAAe,EAAC,MANlB;AAOE,IAAA,QAAQ,EAAEe,IAAI,IAAI;AAChBJ,MAAAA,WAAW,CAACI,IAAD,CAAX;AACD;AATH,KAUMX,IAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAgBD,CAnCD;;AAqCA,eAAeH,UAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport ReactDatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nimport { PseudoBoxProps as ChakraPseudoBoxProps } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\nimport formatWeekDay from './utils/formatWeekDay';\n\ninterface IDatePickerProps extends Omit<ReactDatePickerProps, 'onChange'> {\n  name: string;\n  onChange?: (\n    date: Date | [Date, Date] | null,\n    event: React.SyntheticEvent<any> | undefined,\n  ) => void;\n  containerProps?: ChakraPseudoBoxProps;\n}\n\nconst DatePicker: React.FC<IDatePickerProps> = ({\n  name,\n  containerProps,\n  ...rest\n}) => {\n  const datePickerRef = useRef<ReactDatePicker>(null);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const [selected, setSelected] = useState(defaultValue);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: datePickerRef.current,\n      path: 'props.selected',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container borderRadius=\"md\" isErrored={!!error} {...containerProps}>\n      <ReactDatePicker\n        ref={datePickerRef}\n        selected={selected}\n        showPopperArrow={false}\n        dateFormat=\"dd/MM/yyyy\"\n        formatWeekDay={formatWeekDay}\n        placeholderText=\"Data\"\n        onChange={date => {\n          setSelected(date);\n        }}\n        {...rest}\n      />\n    </Container>\n  );\n};\n\nexport default DatePicker;\n"]},"metadata":{},"sourceType":"module"}