{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Input/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { Input as ChakraInput } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar Input = function Input(_ref) {\n  _s();\n\n  var name = _ref.name,\n      _ref$containerProps = _ref.containerProps,\n      containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,\n      Icon = _ref.icon,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"containerProps\", \"icon\"]);\n\n  var inputRef = useRef(null);\n\n  var _useState = useState(false),\n      isFocused = _useState[0],\n      setIsFocused = _useState[1];\n\n  var _useState2 = useState(false),\n      isFilled = _useState2[0],\n      setIsFilled = _useState2[1];\n\n  var _useField = useField(name),\n      fieldName = _useField.fieldName,\n      defaultValue = _useField.defaultValue,\n      error = _useField.error,\n      registerField = _useField.registerField;\n\n  var handleInputFocus = useCallback(function () {\n    setIsFocused(true);\n  }, []);\n  var handleInputBlur = useCallback(function () {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(function () {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    bg: \"gray.100\",\n    width: \"100%\",\n    height: 12,\n    borderRadius: \"md\",\n    paddingLeft: 4\n  }, containerProps, {\n    onClick: function onClick() {\n      inputRef.current.focus();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }), Icon && ___EmotionJSX(Icon, {\n    size: 15,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }\n  }), ___EmotionJSX(ChakraInput, _extends({\n    ref: inputRef,\n    defaultValue: defaultValue,\n    focusBorderColor: null,\n    paddingLeft: 0,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  })));\n};\n\n_s(Input, \"Ip9WPveULTttGddIPE0vdzs43sI=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Input/index.tsx"],"names":["React","useRef","useState","useCallback","useEffect","Input","ChakraInput","useField","Container","name","containerProps","Icon","icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path","focus"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,SAA/C,QAAgE,OAAhE;AAGA,SACEC,KAAK,IAAIC,WADX,QAIO,iBAJP;AAKA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;;AAQA,IAAMH,KAA4B,GAAG,SAA/BA,KAA+B,OAK/B;AAAA;;AAAA,MAJJI,IAII,QAJJA,IAII;AAAA,iCAHJC,cAGI;AAAA,MAHJA,cAGI,oCAHa,EAGb;AAAA,MAFEC,IAEF,QAFJC,IAEI;AAAA,MADDC,IACC;;AACJ,MAAMC,QAAQ,GAAGb,MAAM,CAAmB,IAAnB,CAAvB;;AADI,kBAG8BC,QAAQ,CAAC,KAAD,CAHtC;AAAA,MAGGa,SAHH;AAAA,MAGcC,YAHd;;AAAA,mBAI4Bd,QAAQ,CAAC,KAAD,CAJpC;AAAA,MAIGe,QAJH;AAAA,MAIaC,WAJb;;AAAA,kBAMsDX,QAAQ,CAACE,IAAD,CAN9D;AAAA,MAMIU,SANJ,aAMIA,SANJ;AAAA,MAMeC,YANf,aAMeA,YANf;AAAA,MAM6BC,KAN7B,aAM6BA,KAN7B;AAAA,MAMoCC,aANpC,aAMoCA,aANpC;;AAQJ,MAAMC,gBAAgB,GAAGpB,WAAW,CAAC,YAAM;AACzCa,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,MAAMQ,eAAe,GAAGrB,WAAW,CAAC,YAAM;AAAA;;AACxCa,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAtB,EAAAA,SAAS,CAAC,YAAM;AACdkB,IAAAA,aAAa,CAAC;AACZb,MAAAA,IAAI,EAAEU,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,SACE,cAAC,SAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,SAAS,EAAE,CAAC,CAACI,KAHf;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,MAAM,EAAE,EANV;AAOE,IAAA,YAAY,EAAC,IAPf;AAQE,IAAA,WAAW,EAAE;AARf,KASMX,cATN;AAUE,IAAA,OAAO,EAAE,mBAAM;AACbI,MAAAA,QAAQ,CAACW,OAAT,CAAiBI,KAAjB;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcGlB,IAAI,IAAI,cAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdX,EAgBE,cAAC,WAAD;AACE,IAAA,GAAG,EAAEG,QADP;AAEE,IAAA,YAAY,EAAEM,YAFhB;AAGE,IAAA,gBAAgB,EAAE,IAHpB;AAIE,IAAA,WAAW,EAAE,CAJf;AAKE,IAAA,OAAO,EAAEG,gBALX;AAME,IAAA,MAAM,EAAEC;AANV,KAOMX,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhBF,CADF;AA4BD,CA3DD;;GAAMR,K;UAWsDE,Q;;;KAXtDF,K;AA6DN,eAAeA,KAAf","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { IconBaseProps } from 'react-icons';\n\nimport {\n  Input as ChakraInput,\n  InputProps as ChakraInputProps,\n  PseudoBoxProps as ChakraPseudoBoxProps,\n} from '@chakra-ui/core';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface IInputProps extends ChakraInputProps {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n  containerProps?: ChakraPseudoBoxProps;\n}\n\nconst Input: React.FC<IInputProps> = ({\n  name,\n  containerProps = {},\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container\n      isFocused={isFocused}\n      isFilled={isFilled}\n      isErrored={!!error}\n      bg=\"gray.100\"\n      width=\"100%\"\n      height={12}\n      borderRadius=\"md\"\n      paddingLeft={4}\n      {...containerProps}\n      onClick={() => {\n        inputRef.current.focus();\n      }}\n    >\n      {Icon && <Icon size={15} />}\n\n      <ChakraInput\n        ref={inputRef}\n        defaultValue={defaultValue}\n        focusBorderColor={null}\n        paddingLeft={0}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        {...rest}\n      />\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}