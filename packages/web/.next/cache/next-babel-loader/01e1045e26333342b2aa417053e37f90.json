{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/contexts/theme/ThemeContainer.tsx\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { ThemeProvider as ChakraThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\nimport customTheme from '@/styles/theme';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar ThemeContainer = function ThemeContainer(_ref) {\n  var children = _ref.children;\n  return ___EmotionJSX(ChakraThemeProvider, {\n    theme: customTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  }, ___EmotionJSX(ColorModeProvider, {\n    value: \"light\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(EmotionThemeProvider, {\n    theme: {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(CSSReset, {\n    config: function config(theme, _config) {\n      return _objectSpread(_objectSpread({}, _config), {}, {\n        light: _objectSpread(_objectSpread({}, _config.light), {}, {\n          bg: theme.colors.gray[100],\n          color: theme.colors.gray[700]\n        })\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }), children)));\n};\n\n_c = ThemeContainer;\nexport default ThemeContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContainer\");","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/contexts/theme/ThemeContainer.tsx"],"names":["React","ThemeProvider","ChakraThemeProvider","ColorModeProvider","CSSReset","EmotionThemeProvider","customTheme","ThemeContainer","children","theme","config","light","bg","colors","gray","color"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,aAAa,IAAIC,mBADnB,EAEEC,iBAFF,EAGEC,QAHF,QAIO,iBAJP;AAKA,SAASH,aAAa,IAAII,oBAA1B,QAAsD,iBAAtD;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAEA,IAAMC,cAAwB,GAAG,SAA3BA,cAA2B;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SAC/B,cAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEF,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,oBAAD;AAAsB,IAAA,KAAK,EAAE,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,cAAC,QAAD;AACE,IAAA,MAAM,EAAE,gBAACG,KAAD,EAAQC,OAAR;AAAA,6CACHA,OADG;AAENC,QAAAA,KAAK,kCACAD,OAAM,CAACC,KADP;AAEHC,UAAAA,EAAE,EAAEH,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,GAAlB,CAFD;AAGHC,UAAAA,KAAK,EAAEN,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,GAAlB;AAHJ;AAFC;AAAA,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWGN,QAXH,CADF,CADF,CAD+B;AAAA,CAAjC;;KAAMD,c;AAoBN,eAAeA,cAAf","sourcesContent":["import React from 'react';\n\nimport {\n  ThemeProvider as ChakraThemeProvider,\n  ColorModeProvider,\n  CSSReset,\n} from '@chakra-ui/core';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\n\nimport customTheme from '@/styles/theme';\n\nconst ThemeContainer: React.FC = ({ children }) => (\n  <ChakraThemeProvider theme={customTheme}>\n    <ColorModeProvider value=\"light\">\n      <EmotionThemeProvider theme={{}}>\n        <CSSReset\n          config={(theme, config) => ({\n            ...config,\n            light: {\n              ...config.light,\n              bg: theme.colors.gray[100],\n              color: theme.colors.gray[700],\n            },\n          })}\n        />\n        {children}\n      </EmotionThemeProvider>\n    </ColorModeProvider>\n  </ChakraThemeProvider>\n);\n\nexport default ThemeContainer;\n"]},"metadata":{},"sourceType":"module"}