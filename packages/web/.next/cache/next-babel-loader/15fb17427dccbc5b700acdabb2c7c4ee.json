{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport Cookies from '@/lib/cookies';\nimport getTimeZone from '@/utils/getTimeZone';\nvar api = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL\n});\napi.defaults.headers['User-TimeZone'] = getTimeZone();\napi.interceptors.request.use(function (config) {\n  var session = Cookies.get('session');\n\n  if (session === null || session === void 0 ? void 0 : session.access_token) {\n    config.headers.Authorization = \"Bearer \".concat(session.access_token);\n  }\n\n  return config;\n}, function (error) {\n  Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  var request = error.config;\n\n  var isFrom = function isFrom(from) {\n    return request.url.includes(from);\n  };\n\n  var isMethod = function isMethod(method) {\n    return request.method.toUpperCase() === method;\n  };\n\n  var isStatusCode = function isStatusCode(statusCode) {\n    return error.response && error.response.status === statusCode;\n  };\n\n  if (isFrom('sessions') && !isMethod('PUT')) {\n    return Promise.reject(error);\n  }\n\n  var session = Cookies.get('session');\n\n  if (!session || !isStatusCode(200) && isFrom('sessions') && isMethod('PUT')) {\n    Cookies.remove('session');\n    window.location.href = '/';\n    return Promise.reject(error);\n  }\n\n  if (isStatusCode(401) && !request._retry) {\n    request._retry = true;\n    return api.put('sessions', {\n      token: session.refresh_token\n    }).then(function (response) {\n      var access_token = response.data.access_token;\n      Cookies.set('session', _objectSpread(_objectSpread({}, session), {}, {\n        access_token: access_token\n      }));\n      api.defaults.headers.common.Authorization = \"Bearer \".concat(access_token);\n      return api(request);\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default api;","map":null,"metadata":{},"sourceType":"module"}