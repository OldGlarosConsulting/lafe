{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Select as ChakraSelect } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst ReactSelect = (_ref) => {\n  let {\n    name,\n    children,\n    containerProps\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"children\", \"containerProps\"]);\n\n  const selectRef = useRef(null);\n  const {\n    0: isFocused,\n    1: setIsFocused\n  } = useState(false);\n  const {\n    0: isFilled,\n    1: setIsFilled\n  } = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _selectRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_selectRef$current = selectRef.current) === null || _selectRef$current === void 0 ? void 0 : _selectRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    bg: \"green.50\",\n    width: \"100%\",\n    height: 12,\n    borderRadius: \"md\",\n    paddingLeft: 4\n  }, containerProps, {\n    onClick: () => {\n      selectRef.current.focus();\n    }\n  }), ___EmotionJSX(ChakraSelect, _extends({\n    defaultValue: defaultValue,\n    bg: \"green.50\",\n    border: 0,\n    focusBorderColor: null,\n    paddingLeft: 0,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    ref: selectRef\n  }, rest), children));\n};\n\nexport default ReactSelect;","map":null,"metadata":{},"sourceType":"module"}