{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateFuneralsModal/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef, useEffect, useState } from 'react';\nimport { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useToast } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport Select from '@/components/Select';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport api from '../../../services/api';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst CreateFuneralsModal = ({\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  const formRef = useRef(null);\n  const {\n    0: cemeteries,\n    1: setCemeteries\n  } = useState([]);\n  const toast = useToast();\n  useEffect(() => {\n    api.get('cemeteries').then(response => {\n      const cemeteriesResponse = response.data;\n      setCemeteries(cemeteriesResponse);\n    });\n  }, []);\n  const handleSubmit = useCallback(async (data, event) => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome obrigatório'),\n        url_cam: Yup.string().required('Link da camêra obrigatório'),\n        cemetery_id: Yup.string().uuid().required('Cemitério obrigatório')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      await api.post('funerals', data);\n      toast({\n        status: 'success',\n        title: 'Velório criado com sucesso',\n        position: 'top',\n        duration: 3000\n      });\n      onClose(event);\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro ao registrar cemitério',\n        description: 'Ocorreu um erro ao registrar cemitério, tente novamente.',\n        position: 'top',\n        duration: 5000\n      });\n    }\n  }, []);\n  return ___EmotionJSX(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(ModalContent, {\n    borderRadius: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Registrar vel\\xF3rio\"), ___EmotionJSX(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }), ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBody, {\n    paddingBottom: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Input, {\n    name: \"name\",\n    placeholder: \"Nome\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Input, {\n    name: \"url_cam\",\n    placeholder: \"Link da cam\\xEAra do vel\\xF3rio\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Select, {\n    name: \"cemetery_id\",\n    placeholder: \"Cemiterios\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, cemeteries.map(cemetery => ___EmotionJSX(\"option\", {\n    value: cemetery.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, cemetery.name)))), ___EmotionJSX(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Button, {\n    variant: \"ghost\",\n    onClick: onClose,\n    marginRight: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"Cancelar\"), ___EmotionJSX(Button, {\n    type: \"submit\",\n    variantColor: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Salvar\")))));\n};\n\nexport default CreateFuneralsModal;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateFuneralsModal/index.tsx"],"names":["React","useCallback","useRef","useEffect","useState","Button","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useToast","Form","Yup","Input","Select","getValidationErrors","api","CreateFuneralsModal","isOpen","onClose","onSave","formRef","cemeteries","setCemeteries","toast","get","then","response","cemeteriesResponse","data","handleSubmit","event","current","setErrors","schema","object","shape","name","string","required","url_cam","cemetery_id","uuid","validate","abortEarly","post","status","title","position","duration","err","ValidationError","errors","description","border","borderColor","bg","map","cemetery","id"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect, useState } from 'react';\n\nimport {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from '@chakra-ui/core';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\n\nimport DatePicker from '@/components/DatePicker';\nimport Input from '@/components/Input';\nimport Select from '@/components/Select';\nimport getValidationErrors from '@/utils/getValidationErrors';\n\nimport api from '../../../services/api';\n\ninterface IFormData {\n  name: string;\n  email: string;\n  telephone: string;\n  gender: string;\n  cpf: string;\n  birth_date: Date;\n}\n\ninterface ICemeteries {\n  id: string;\n  name: string;\n}\n\ninterface ICreateFuneralsModalProps {\n  isOpen: boolean;\n  onClose?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason?: 'pressedEscape' | 'clickedOverlay',\n  ) => void;\n  onSave: () => void;\n}\nconst CreateFuneralsModal: React.FC<ICreateFuneralsModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n\n  const [cemeteries, setCemeteries] = useState<ICemeteries[]>(\n    [] as ICemeteries[],\n  );\n  const toast = useToast();\n\n  useEffect(() => {\n    api.get('cemeteries').then(response => {\n      const cemeteriesResponse: ICemeteries[] = response.data;\n\n      setCemeteries(cemeteriesResponse);\n    });\n  }, []);\n  const handleSubmit = useCallback(async (data: IFormData, event) => {\n    try {\n      formRef.current?.setErrors({});\n\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome obrigatório'),\n        url_cam: Yup.string().required('Link da camêra obrigatório'),\n        cemetery_id: Yup.string().uuid().required('Cemitério obrigatório'),\n      });\n\n      await schema.validate(data, { abortEarly: false });\n\n      await api.post('funerals', data);\n\n      toast({\n        status: 'success',\n        title: 'Velório criado com sucesso',\n        position: 'top',\n        duration: 3000,\n      });\n\n      onClose(event);\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n\n        formRef.current?.setErrors(errors);\n\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro ao registrar cemitério',\n        description: 'Ocorreu um erro ao registrar cemitério, tente novamente.',\n        position: 'top',\n        duration: 5000,\n      });\n    }\n  }, []);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n\n      <ModalContent borderRadius=\"md\">\n        <ModalHeader>Registrar velório</ModalHeader>\n        <ModalCloseButton />\n\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <ModalBody paddingBottom={4}>\n            <Input\n              name=\"name\"\n              placeholder=\"Nome\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n              }}\n            />\n            <Input\n              name=\"url_cam\"\n              placeholder=\"Link da camêra do velório\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n              }}\n            />\n            <Select\n              name=\"cemetery_id\"\n              placeholder=\"Cemiterios\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n              }}\n            >\n              {cemeteries.map(cemetery => (\n                <option value={cemetery.id}>{cemetery.name}</option>\n              ))}\n            </Select>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button variant=\"ghost\" onClick={onClose} marginRight={4}>\n              Cancelar\n            </Button>\n\n            <Button type=\"submit\" variantColor=\"green\">\n              Salvar\n            </Button>\n          </ModalFooter>\n        </Form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateFuneralsModal;\n"]},"metadata":{},"sourceType":"module"}