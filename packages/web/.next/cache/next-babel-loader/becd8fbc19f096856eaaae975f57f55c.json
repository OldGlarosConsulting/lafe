{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/contexts/theme/ThemeContainer.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { ThemeProvider as ChakraThemeProvider, ColorModeProvider, CSSReset } from '@chakra-ui/core';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\nimport customTheme from '@/styles/theme';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst ThemeContainer = ({\n  children\n}) => ___EmotionJSX(ChakraThemeProvider, {\n  theme: customTheme,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }\n}, ___EmotionJSX(ColorModeProvider, {\n  value: \"light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }\n}, ___EmotionJSX(EmotionThemeProvider, {\n  theme: {},\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 7\n  }\n}, ___EmotionJSX(CSSReset, {\n  config: (theme, config) => _objectSpread(_objectSpread({}, config), {}, {\n    light: _objectSpread(_objectSpread({}, config.light), {}, {\n      bg: theme.colors.gray[100],\n      color: theme.colors.gray[700]\n    })\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }\n}), children)));\n\nexport default ThemeContainer;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/contexts/theme/ThemeContainer.tsx"],"names":["React","ThemeProvider","ChakraThemeProvider","ColorModeProvider","CSSReset","EmotionThemeProvider","customTheme","ThemeContainer","children","theme","config","light","bg","colors","gray","color"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,aAAa,IAAIC,mBADnB,EAEEC,iBAFF,EAGEC,QAHF,QAIO,iBAJP;AAKA,SAASH,aAAa,IAAII,oBAA1B,QAAsD,iBAAtD;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;;AAEA,MAAMC,cAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAC/B,cAAC,mBAAD;AAAqB,EAAA,KAAK,EAAEF,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,cAAC,iBAAD;AAAmB,EAAA,KAAK,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,cAAC,oBAAD;AAAsB,EAAA,KAAK,EAAE,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,cAAC,QAAD;AACE,EAAA,MAAM,EAAE,CAACG,KAAD,EAAQC,MAAR,qCACHA,MADG;AAENC,IAAAA,KAAK,kCACAD,MAAM,CAACC,KADP;AAEHC,MAAAA,EAAE,EAAEH,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,GAAlB,CAFD;AAGHC,MAAAA,KAAK,EAAEN,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,GAAlB;AAHJ;AAFC,IADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAWGN,QAXH,CADF,CADF,CADF;;AAoBA,eAAeD,cAAf","sourcesContent":["import React from 'react';\n\nimport {\n  ThemeProvider as ChakraThemeProvider,\n  ColorModeProvider,\n  CSSReset,\n} from '@chakra-ui/core';\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming';\n\nimport customTheme from '@/styles/theme';\n\nconst ThemeContainer: React.FC = ({ children }) => (\n  <ChakraThemeProvider theme={customTheme}>\n    <ColorModeProvider value=\"light\">\n      <EmotionThemeProvider theme={{}}>\n        <CSSReset\n          config={(theme, config) => ({\n            ...config,\n            light: {\n              ...config.light,\n              bg: theme.colors.gray[100],\n              color: theme.colors.gray[700],\n            },\n          })}\n        />\n        {children}\n      </EmotionThemeProvider>\n    </ColorModeProvider>\n  </ChakraThemeProvider>\n);\n\nexport default ThemeContainer;\n"]},"metadata":{},"sourceType":"module"}