{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Input/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { Input as ChakraInput } from '@chakra-ui/core';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst Input = (_ref) => {\n  let {\n    name,\n    containerProps = {},\n    icon: Icon\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"containerProps\", \"icon\"]);\n\n  const inputRef = useRef(null);\n  const {\n    0: isFocused,\n    1: setIsFocused\n  } = useState(false);\n  const {\n    0: isFilled,\n    1: setIsFilled\n  } = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return ___EmotionJSX(Container, _extends({\n    isFocused: isFocused,\n    isFilled: isFilled,\n    isErrored: !!error,\n    bg: \"gray.100\",\n    width: \"100%\",\n    height: 12,\n    borderRadius: \"md\",\n    paddingLeft: 4\n  }, containerProps, {\n    onClick: () => {\n      inputRef.current.focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }), Icon && ___EmotionJSX(Icon, {\n    size: 15,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 16\n    }\n  }), ___EmotionJSX(ChakraInput, _extends({\n    ref: inputRef,\n    defaultValue: defaultValue,\n    focusBorderColor: null,\n    paddingLeft: 0,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/lafe/packages/web/src/components/Input/index.tsx"],"names":["React","useRef","useState","useCallback","useEffect","Input","ChakraInput","useField","Container","name","containerProps","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path","focus"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CC,SAA/C,QAAgE,OAAhE;AAGA,SACEC,KAAK,IAAIC,WADX,QAIO,iBAJP;AAKA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;;AAQA,MAAMH,KAA4B,GAAG,UAK/B;AAAA,MALgC;AACpCI,IAAAA,IADoC;AAEpCC,IAAAA,cAAc,GAAG,EAFmB;AAGpCC,IAAAA,IAAI,EAAEC;AAH8B,GAKhC;AAAA,MADDC,IACC;;AACJ,QAAMC,QAAQ,GAAGb,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACe,QAAD;AAAA,OAAWC;AAAX,MAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEiB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDf,QAAQ,CAACE,IAAD,CAAlE;AAEA,QAAMc,gBAAgB,GAAGpB,WAAW,CAAC,MAAM;AACzCa,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGrB,WAAW,CAAC,MAAM;AAAA;;AACxCa,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAtB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,aAAa,CAAC;AACZb,MAAAA,IAAI,EAAEU,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,SACE,cAAC,SAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,SAAS,EAAE,CAAC,CAACI,KAHf;AAIE,IAAA,EAAE,EAAC,UAJL;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,MAAM,EAAE,EANV;AAOE,IAAA,YAAY,EAAC,IAPf;AAQE,IAAA,WAAW,EAAE;AARf,KASMX,cATN;AAUE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,QAAQ,CAACW,OAAT,CAAiBI,KAAjB;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcGjB,IAAI,IAAI,cAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdX,EAgBE,cAAC,WAAD;AACE,IAAA,GAAG,EAAEE,QADP;AAEE,IAAA,YAAY,EAAEM,YAFhB;AAGE,IAAA,gBAAgB,EAAE,IAHpB;AAIE,IAAA,WAAW,EAAE,CAJf;AAKE,IAAA,OAAO,EAAEG,gBALX;AAME,IAAA,MAAM,EAAEC;AANV,KAOMX,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhBF,CADF;AA4BD,CA3DD;;AA6DA,eAAeR,KAAf","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { IconBaseProps } from 'react-icons';\n\nimport {\n  Input as ChakraInput,\n  InputProps as ChakraInputProps,\n  PseudoBoxProps as ChakraPseudoBoxProps,\n} from '@chakra-ui/core';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface IInputProps extends ChakraInputProps {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n  containerProps?: ChakraPseudoBoxProps;\n}\n\nconst Input: React.FC<IInputProps> = ({\n  name,\n  containerProps = {},\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container\n      isFocused={isFocused}\n      isFilled={isFilled}\n      isErrored={!!error}\n      bg=\"gray.100\"\n      width=\"100%\"\n      height={12}\n      borderRadius=\"md\"\n      paddingLeft={4}\n      {...containerProps}\n      onClick={() => {\n        inputRef.current.focus();\n      }}\n    >\n      {Icon && <Icon size={15} />}\n\n      <ChakraInput\n        ref={inputRef}\n        defaultValue={defaultValue}\n        focusBorderColor={null}\n        paddingLeft={0}\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        {...rest}\n      />\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}