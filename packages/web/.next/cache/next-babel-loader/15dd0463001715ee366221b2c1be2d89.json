{"ast":null,"code":"var _jsxFileName = \"/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateEmployeesModal/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef, useState } from 'react';\nimport { Button, Checkbox, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, useToast } from '@chakra-ui/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst CreateEmpployeesModal = ({\n  isOpen,\n  onClose,\n  onSave\n}) => {\n  const formRef = useRef(null);\n  const toast = useToast();\n  const {\n    0: admRole,\n    1: setAdmRole\n  } = useState(false);\n  useState(() => {\n    setAdmRole(false);\n  }, []);\n  const handleSubmit = useCallback(async (data, event) => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        name: Yup.string().required('Nome obrigatório'),\n        email: Yup.string().email().required('E-mail obrigatória'),\n        password: Yup.string().required('Senha obrigatório'),\n        passwordConfirmation: Yup.string().oneOf([Yup.ref('password'), null], 'As senhas devem ser iguais')\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      }); // await api.post('employees', {\n      //   name: data.name,\n      //   email: data.email,\n      //   password: data.password,\n      // });\n\n      console.log(admRole);\n      toast({\n        status: 'success',\n        title: 'Funcionário registrado com sucesso!',\n        position: 'top',\n        duration: 3000\n      });\n      onClose(event);\n      onSave();\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      toast({\n        status: 'error',\n        title: 'Erro no registro do funcionário',\n        description: 'Ocorreu um erro ao tentar registrar o funcionário, tente novamente.',\n        position: 'top',\n        duration: 5000\n      });\n    }\n  }, [admRole]);\n  return ___EmotionJSX(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, ___EmotionJSX(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), ___EmotionJSX(ModalContent, {\n    borderRadius: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, ___EmotionJSX(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"Registrar funcion\\xE1rio\"), ___EmotionJSX(ModalCloseButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), ___EmotionJSX(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, ___EmotionJSX(ModalBody, {\n    paddingBottom: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Input, {\n    name: \"name\",\n    placeholder: \"Nome\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Input, {\n    name: \"email\",\n    placeholder: \"E-mail\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white',\n      marginTop: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Input, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Senha\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white',\n      marginTop: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), ___EmotionJSX(Input, {\n    name: \"passwordConfirmation\",\n    type: \"password\",\n    placeholder: \"Confirme a senha do funcion\\xE1rio\",\n    containerProps: {\n      border: '1px solid',\n      borderColor: 'gray.400',\n      bg: 'white',\n      marginTop: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  })), ___EmotionJSX(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, ___EmotionJSX(Checkbox, {\n    color: \"green\",\n    onChange: event => {\n      setAdmRole(event.target.checked);\n      console.log(admRole);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, \"Administrador\"), ___EmotionJSX(Button, {\n    variant: \"ghost\",\n    onClick: onClose,\n    marginRight: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Cancelar\"), ___EmotionJSX(Button, {\n    type: \"submit\",\n    variantColor: \"green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, \"Confirmar\")))));\n};\n\nexport default CreateEmpployeesModal;","map":{"version":3,"sources":["/home/matheus/Documents/drive-sync/Projects/endor/packages/web/src/components/Modals/CreateEmployeesModal/index.tsx"],"names":["React","useCallback","useRef","useState","Button","Checkbox","Modal","ModalBody","ModalCloseButton","ModalContent","ModalFooter","ModalHeader","ModalOverlay","useToast","Form","Yup","Input","getValidationErrors","CreateEmpployeesModal","isOpen","onClose","onSave","formRef","toast","admRole","setAdmRole","handleSubmit","data","event","current","setErrors","schema","object","shape","name","string","required","email","password","passwordConfirmation","oneOf","ref","validate","abortEarly","console","log","status","title","position","duration","err","ValidationError","errors","description","border","borderColor","bg","marginTop","target","checked"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useCallback, useRef, useState } from 'react';\n\nimport {\n  Button,\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  useToast,\n} from '@chakra-ui/core';\nimport { FormHandles } from '@unform/core';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\n\nimport Input from '@/components/Input';\nimport getValidationErrors from '@/utils/getValidationErrors';\n\nimport api from '../../../services/api';\n\ninterface IFormData {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n}\n\ninterface ICreateEmpployeesModalProps {\n  isOpen: boolean;\n  onClose?: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    reason?: 'pressedEscape' | 'clickedOverlay',\n  ) => void;\n  onSave: () => void;\n}\n\nconst CreateEmpployeesModal: React.FC<ICreateEmpployeesModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n\n  const toast = useToast();\n\n  const [admRole, setAdmRole] = useState<boolean>(false);\n\n  useState(() => {\n    setAdmRole(false);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (data: IFormData, event) => {\n      try {\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome obrigatório'),\n          email: Yup.string().email().required('E-mail obrigatória'),\n          password: Yup.string().required('Senha obrigatório'),\n          passwordConfirmation: Yup.string().oneOf(\n            [Yup.ref('password'), null],\n            'As senhas devem ser iguais',\n          ),\n        });\n\n        await schema.validate(data, { abortEarly: false });\n\n        // await api.post('employees', {\n        //   name: data.name,\n        //   email: data.email,\n        //   password: data.password,\n        // });\n\n        console.log(admRole);\n\n        toast({\n          status: 'success',\n          title: 'Funcionário registrado com sucesso!',\n          position: 'top',\n          duration: 3000,\n        });\n\n        onClose(event);\n        onSave();\n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        toast({\n          status: 'error',\n          title: 'Erro no registro do funcionário',\n          description:\n            'Ocorreu um erro ao tentar registrar o funcionário, tente novamente.',\n          position: 'top',\n          duration: 5000,\n        });\n      }\n    },\n    [admRole],\n  );\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n\n      <ModalContent borderRadius=\"md\">\n        <ModalHeader>Registrar funcionário</ModalHeader>\n        <ModalCloseButton />\n\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <ModalBody paddingBottom={4}>\n            <Input\n              name=\"name\"\n              placeholder=\"Nome\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n              }}\n            />\n\n            <Input\n              name=\"email\"\n              placeholder=\"E-mail\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n                marginTop: 3,\n              }}\n            />\n\n            <Input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Senha\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n                marginTop: 3,\n              }}\n            />\n\n            <Input\n              name=\"passwordConfirmation\"\n              type=\"password\"\n              placeholder=\"Confirme a senha do funcionário\"\n              containerProps={{\n                border: '1px solid',\n                borderColor: 'gray.400',\n                bg: 'white',\n                marginTop: 3,\n              }}\n            />\n          </ModalBody>\n\n          <ModalFooter>\n            <Checkbox\n              color=\"green\"\n              onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                setAdmRole(event.target.checked);\n                console.log(admRole);\n              }}\n            >\n              Administrador\n            </Checkbox>\n            <Button variant=\"ghost\" onClick={onClose} marginRight={4}>\n              Cancelar\n            </Button>\n\n            <Button type=\"submit\" variantColor=\"green\">\n              Confirmar\n            </Button>\n          </ModalFooter>\n        </Form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default CreateEmpployeesModal;\n"]},"metadata":{},"sourceType":"module"}